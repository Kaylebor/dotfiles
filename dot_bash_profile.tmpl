{{- template "brew_eval" . }}
eval "$(mise activate bash)" # Mise [https://mise.jdx.dev]

{{- if and (hasKey . "homebrewPaths") (hasKey . "brewBin") .brewBin (stat .brewBin) }}
# Install Homebrew Casks to specified directory
export HOMEBREW_CASK_OPTS="--appdir={{ .homebrewPaths.applicationsPath }}"
{{- end }}

## PATH
# Add each of the specified directories to PATH if they exist
{{- if stat .paths.localBin }}
PATH="$HOME/.local/bin:$PATH" # User-installed binaries
{{- end }}
{{- if stat .paths.mixEscripts }}
PATH="$HOME/.mix/escripts:$PATH" # Mix escripts (Elixir)
{{- end }}
{{- if stat .paths.bunBin }}
PATH="$HOME/.bun/bin:$PATH" # Bun JavaScript runtime
{{- end }}
{{- if stat .paths.denoBin }}
PATH="$HOME/.deno/bin:$PATH" # Deno JavaScript runtime
{{- end }}
{{- if stat .paths.rdBin }}
PATH="$HOME/.rd/bin:$PATH" # Rancher Desktop for Docker management
{{- end }}
{{- if stat .paths.yabridge }}
PATH="$HOME/.local/share/yabridge:$PATH" # Yabridge for VST plugins
{{- end }}
{{- $xdgDataHome := env "XDG_DATA_HOME" }}
{{- if not $xdgDataHome }}
{{-   $xdgDataHome = .paths.localShare }}
{{- end }}
{{- if stat (joinPath $xdgDataHome "google-cloud-sdk" "bin") }}
PATH="${XDG_DATA_HOME:-$HOME/.local/share}/google-cloud-sdk/bin:$PATH" # Google Cloud SDK
{{- end }}
{{- if eq .chezmoi.os "darwin" }}
{{-   $brewPrefix := "" }}
{{-   if and (hasKey . "homebrewInstallType") (eq .homebrewInstallType "alternative") }}
{{-     if and (hasKey . "homebrewPaths") (stat .homebrewPaths.base) }}
{{-       $brewPrefix = .homebrewPaths.base }}
{{-     end }}
{{-   else }}
{{-     if stat "/opt/homebrew" }}
{{-       $brewPrefix = "/opt/homebrew" }}
{{-     else if stat "/usr/local/Homebrew" }}
{{-       $brewPrefix = "/usr/local" }}
{{-     end }}
{{-   end }}
{{-   if and $brewPrefix (stat (joinPath $brewPrefix "opt" "libpq" "bin")) }}
PATH="{{ $brewPrefix }}/opt/libpq/bin:$PATH" # PostgreSQL
{{-   end }}
{{- end }}
{{- if and (eq .chezmoi.os "darwin") (hasKey . "brewBin") .brewBin }}
PATH="$({{ .brewBin }} --prefix sqlite)/bin:$PATH" # Sqlite from Homebrew instead of MacOS built-in
{{- end }}
export PATH

# Force en_US.UTF-8 locale
export LC_ALL=en_US.UTF-8
export DOCKER_BUILDKIT=1

{{- if eq .chezmoi.os "darwin" }}
# Increase file descriptor limit for development work (macOS)
ulimit -n 65536 2>/dev/null || true

# Set up gcc paths for alternative Homebrew installations
export LANG=en_US.UTF-8

# Erlang/ODBC settings
{{- $brewPrefix := "" }}
{{- if and (hasKey . "homebrewInstallType") (eq .homebrewInstallType "alternative") }}
{{-   if and (hasKey . "homebrewPaths") (stat .homebrewPaths.base) }}
{{-     $brewPrefix = .homebrewPaths.base }}
{{-   end }}
{{- else }}
{{-   if stat "/opt/homebrew" }}
{{-     $brewPrefix = "/opt/homebrew" }}
{{-   else if stat "/usr/local/Homebrew" }}
{{-     $brewPrefix = "/usr/local" }}
{{-   end }}
{{- end }}
{{- if $brewPrefix }}
UNIXODBCHOME="{{ joinPath $brewPrefix "opt" "unixodbc" }}"
export CPPFLAGS="${CPPFLAGS+"$CPPFLAGS "}-I${UNIXODBCHOME}/include"
export LDFLAGS="${LDFLAGS+"$LDFLAGS "}-L${UNIXODBCHOME}/lib"
export KERL_CONFIGURE_OPTIONS="--with-odbc=${UNIXODBCHOME}"
{{- end }}
{{- if and (hasKey . "homebrewInstallType") (eq .homebrewInstallType "alternative") }}
{{- if and (hasKey . "homebrewPaths") (stat .homebrewPaths.gccBase) }}
# Library paths
{{- if stat .homebrewPaths.gccLib }}
export LIBRARY_PATH="$HOME/{{ .homebrewPath }}/opt/gcc/lib/gcc/current:$LIBRARY_PATH"
{{- end }}

# C/C++ include paths
{{- if stat .homebrewPaths.gccInclude }}
export C_INCLUDE_PATH="$HOME/{{ .homebrewPath }}/opt/gcc/include:$C_INCLUDE_PATH"
{{- end }}
{{- if stat .homebrewPaths.gccCppInclude }}
export CPLUS_INCLUDE_PATH="$HOME/{{ .homebrewPath }}/opt/gcc/include/c++/15:$CPLUS_INCLUDE_PATH"
{{- end }}

# Set CC and CXX to use the Homebrew gcc
{{- if stat .homebrewPaths.gccBin }}
export CC=gcc-15
export CXX=g++-15
{{- end }}
{{- end }}
{{- end }}
{{- end }}
