#!/usr/bin/env zsh

# Force en_US.UTF-8 locale
export LC_ALL=en_US.UTF-8

# Activate Mise on interactive
eval "$(mise hook-env -s zsh)"

## PATH
# Add each of the specified directories to PATH if they exist
{{- if stat (joinPath .chezmoi.homeDir ".local" "bin") }}
PATH="$HOME/.local/bin:$PATH" # User-installed binaries
{{- end }}
{{- if stat (joinPath .chezmoi.homeDir ".mix" "escripts") }}
PATH="$HOME/.mix/escripts:$PATH" # Mix escripts (Elixir)
{{- end }}
{{- if stat (joinPath .chezmoi.homeDir ".bun" "bin") }}
PATH="$HOME/.bun/bin:$PATH" # Bun JavaScript runtime
{{- end }}
{{- if stat (joinPath .chezmoi.homeDir ".deno" "bin") }}
PATH="$HOME/.deno/bin:$PATH" # Deno JavaScript runtime
{{- end }}
{{- if stat (joinPath .chezmoi.homeDir ".rd" "bin") }}
PATH="$HOME/.rd/bin:$PATH" # Rancher Desktop for Docker management
{{- end }}
{{- if stat (joinPath .chezmoi.homeDir ".local" "share" "yabridge") }}
PATH="$HOME/.local/share/yabridge:$PATH" # Yabridge for VST plugins
{{- end }}
{{- $xdgDataHome := env "XDG_DATA_HOME" }}
{{- if not $xdgDataHome }}
{{-   $xdgDataHome = joinPath .chezmoi.homeDir ".local" "share" }}
{{- end }}
{{- if stat (joinPath $xdgDataHome "google-cloud-sdk" "bin") }}
PATH="${XDG_DATA_HOME:-$HOME/.local/share}/google-cloud-sdk/bin:$PATH" # Google Cloud SDK
{{- end }}
{{- if eq .chezmoi.os "darwin" }}
{{-   $brewPrefix := "" }}
{{-   if eq .homebrewInstallType "alternative" }}
{{-     if stat (joinPath .chezmoi.homeDir .homebrewPath) }}
{{-       $brewPrefix = joinPath .chezmoi.homeDir .homebrewPath }}
{{-     end }}
{{-   else }}
{{-     if stat "/opt/homebrew" }}
{{-       $brewPrefix = "/opt/homebrew" }}
{{-     else if stat "/usr/local/Homebrew" }}
{{-       $brewPrefix = "/usr/local" }}
{{-     end }}
{{-   end }}
{{-   if and $brewPrefix (stat (joinPath $brewPrefix "opt" "libpq" "bin")) }}
PATH="{{ $brewPrefix }}/opt/libpq/bin:$PATH" # PostgreSQL
{{-   end }}
{{- end }}
{{- if and (lookPath "brew") (eq .chezmoi.os "darwin") }}
PATH="$(brew --prefix sqlite)/bin:$PATH" # Sqlite from Homebrew instead of MacOS built-in
{{- end }}
export PATH

{{- if lookPath "fzf" }}
# Integrate fzf
source <(fzf --zsh)
export FZF_COMPLETION_OPTS='--border --info=inline'
export FZF_DEFAULT_OPTS='--height 60% --tmux=center,80% --layout=reverse --border --info=inline'
# https://github.com/catppuccin/fzf
export FZF_DEFAULT_OPTS=" \
--color=bg+:#414559,bg:#303446,spinner:#f2d5cf,hl:#e78284 \
--color=fg:#c6d0f5,header:#e78284,info:#ca9ee6,pointer:#f2d5cf \
--color=marker:#babbf1,fg+:#c6d0f5,prompt:#ca9ee6,hl+:#e78284 \
--color=selected-bg:#51576d \
--color=border:#414559,label:#c6d0f5"
{{- end }}

{{- if lookPath "tv" }}
# Integrate Television
eval "$(tv init zsh)"
{{- end }}

## HISTORY
export HISTFILE=~/.zsh_history
export HISTSIZE=500000
export SAVEHIST=500000
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.

## EARLY SETUP
# Load antidote plugin manager early (it will handle compinit via ez-compinit)
{{- $antidoteFiles := list }}
{{- if eq .chezmoi.os "darwin" }}
{{-   $brewPrefix := "" }}
{{-   if eq .homebrewInstallType "alternative" }}
{{-     if stat (joinPath .chezmoi.homeDir .homebrewPath) }}
{{-       $brewPrefix = joinPath .chezmoi.homeDir .homebrewPath }}
{{-     end }}
{{-   else }}
{{-     if stat "/opt/homebrew" }}
{{-       $brewPrefix = "/opt/homebrew" }}
{{-     else if stat "/usr/local/Homebrew" }}
{{-       $brewPrefix = "/usr/local" }}
{{-     end }}
{{-   end }}
{{-   if $brewPrefix }}
{{-     $antidoteFiles = append $antidoteFiles (joinPath $brewPrefix "opt" "antidote" "share" "antidote" "antidote.zsh") }}
{{-   end }}
{{- end }}
{{- $antidoteFiles = append $antidoteFiles "/usr/share/zsh-antidote/antidote.zsh" }}
{{- range $antidoteFile := $antidoteFiles }}
{{-   if stat $antidoteFile }}
source "{{ $antidoteFile }}"
# initialize plugins statically with ${ZDOTDIR:-~}/.zsh_plugins.txt
antidote load
{{-     break }}
{{-   end }}
{{- end }}

## COMPLETIONS
# Set completion styles
zstyle ':completion:*' menu yes select
zstyle ':completion:*' format $'\e[2;37mCompleting %d\e[m'
{{- if lookPath "eza" }}
# eza styles https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/eza#configuration
zstyle ':omz:plugins:eza' 'dirs-first' 'yes'
zstyle ':omz:plugins:eza' 'git-status' 'yes'
zstyle ':omz:plugins:eza' 'header' 'yes'
zstyle ':omz:plugins:eza' 'show-group' 'yes'
zstyle ':omz:plugins:eza' 'icons' 'yes'
zstyle ':omz:plugins:eza' 'size-prefix' 'si'
zstyle ':omz:plugins:eza' 'time-style' 'long-iso'
zstyle ':omz:plugins:eza' 'hyperlink' 'no'
{{- end }}

{{- if lookPath "carapace" }}
# Load carapace completions
# It includes completions for: aws, gcloud, docker, git, kubectl, terraform, and more
export CARAPACE_BRIDGES='zsh,fish,bash'
source <(carapace _carapace zsh)
{{- end }}

# Note: compinit is already handled by the ez-compinit plugin loaded via antidote

{{- if lookPath "op" }}
# Load op completions
source <(op completion zsh)
{{- end }}

{{- if lookPath "starship" }}
# Load starship prompt
if [[ "$TERM" != "dumb" ]]; then
  source <(starship init zsh)
fi
{{- end }}

## Envs

{{- if lookPath "bat" }}
# Bat as man pager
export MANPAGER="sh -c 'sed -u -e \"s/\\x1B\[[0-9;]*m//g; s/.\\x08//g\" | bat -p -lman'"
{{- end }}

{{- if eq .chezmoi.os "darwin" }}
## MacOS-specific fixes

# Erlang install fixes
{{- $brewPrefix := "" }}
{{- if eq .homebrewInstallType "alternative" }}
{{-   if stat (joinPath .chezmoi.homeDir ".homebrew") }}
{{-     $brewPrefix = joinPath .chezmoi.homeDir ".homebrew" }}
{{-   end }}
{{- else }}
{{-   if stat "/opt/homebrew" }}
{{-     $brewPrefix = "/opt/homebrew" }}
{{-   else if stat "/usr/local/Homebrew" }}
{{-     $brewPrefix = "/usr/local" }}
{{-   end }}
{{- end }}
{{- if $brewPrefix }}
UNIXODBCHOME="{{ joinPath $brewPrefix "opt" "unixodbc" }}"
export CPPFLAGS="${CPPFLAGS+"$CPPFLAGS "}-I${UNIXODBCHOME}/include"
export LDFLAGS="${LDFLAGS+"$LDFLAGS "}-L${UNIXODBCHOME}/lib"
export KERL_CONFIGURE_OPTIONS="--with-odbc=${UNIXODBCHOME}"
{{- end }}

# GCC setup for alternative Homebrew installations
{{- if eq .homebrewInstallType "alternative" }}
{{- if stat (joinPath .chezmoi.homeDir .homebrewPath "opt" "gcc") }}
# Library paths
{{- if stat (joinPath .chezmoi.homeDir .homebrewPath "opt" "gcc" "lib" "gcc" "current") }}
export LIBRARY_PATH="$HOME/{{ .homebrewPath }}/opt/gcc/lib/gcc/current:$LIBRARY_PATH"
{{- end }}

# C/C++ include paths
{{- if stat (joinPath .chezmoi.homeDir .homebrewPath "opt" "gcc" "include") }}
export C_INCLUDE_PATH="$HOME/{{ .homebrewPath }}/opt/gcc/include:$C_INCLUDE_PATH"
{{- end }}
{{- if stat (joinPath .chezmoi.homeDir .homebrewPath "opt" "gcc" "include" "c++" "15") }}
export CPLUS_INCLUDE_PATH="$HOME/{{ .homebrewPath }}/opt/gcc/include/c++/15:$CPLUS_INCLUDE_PATH"
{{- end }}

# Set CC and CXX to use the Homebrew gcc
{{- if stat (joinPath .chezmoi.homeDir .homebrewPath "bin" "gcc-15") }}
export CC=gcc-15
export CXX=g++-15
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- if stat (joinPath .chezmoi.homeDir ".config" "op" "plugins.sh") }}
source $HOME/.config/op/plugins.sh
{{- end }}

# Emacs vterm helper function
vterm_printf() {
    if [ -n "$TMUX" ] \
        && { [ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ]; }; then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}

# Set up aliases
[[ $- == *i* ]] && source $HOME/.config/zsh/aliases.zsh

{{- if stat (joinPath .chezmoi.homeDir ".config" "zsh" ".zshrc.local") }}
# Per-machine configuration
source $HOME/.config/zsh/.zshrc.local
{{- end }}

