# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this development environment.

## Preferred CLI Tools

Modern alternatives to traditional Unix tools. When searching, processing files, or performing system tasks, prefer these:

### Core Tools
- **Search**: `fd` (find), `rg` (grep), `fzf` (fuzzy finder)
- **View/Edit**: `bat` (cat), `difftastic` (diff), `nvim`/`emacs`
- **File ops**: `eza` (ls), `tree`, `jq`/`yq` (JSON/YAML), `jc` (cmd→JSON)
- **System**: `btop` (htop), `dysk` (disk usage), `curlie` (curl)
- **Dev**: `mise` (runtime manager), `gh` (GitHub CLI), `shellcheck`, `shfmt`
{{- if eq .chezmoi.os "darwin" }}
- **Linting**: `golangci-lint`, `biome` (JS/TS)
{{- end }}
{{- if eq .chezmoi.os "linux" }}
- **Network**: `nmap`
{{- end }}
- **VCS**: `difftastic`, `gitu`

### Shell Environment
- **Shell**: Fish (primary) + Starship prompt
- **Multiplexer**: tmux
- **Completion**: carapace

## Configuration
- **Dotfiles**: Managed via chezmoi
- **Aliases**: `cat`→`bat`, `diff`→`difftastic`, git shortcuts
- **Search integration**: FZF+fd, previews with bat/tree/jq/yq

## Key Features
- Fast file operations (fd, ripgrep)
- Rich terminal output with colors/icons
- Git-aware operations
- Cross-platform (macOS/Linux)

## Common Usage
See @CLI_EXAMPLES.md for detailed usage examples and advanced combinations

## Emacs Integration

When Claude Code is opened from within Emacs (vs a normal terminal), additional code navigation tools may be available:

- **mcp__emacs-tools__claude-code-ide-mcp-project-info** - Project overview and statistics
- **mcp__emacs-tools__claude-code-ide-mcp-imenu-list-symbols** - List functions/classes in files
- **mcp__emacs-tools__claude-code-ide-mcp-xref-find-references** - Find symbol usage across codebase
- **mcp__emacs-tools__claude-code-ide-mcp-xref-find-apropos** - Search for symbols by pattern
- **mcp__emacs-tools__claude-code-ide-mcp-treesit-info** - AST/syntax tree analysis
- **mcp__ide__getDiagnostics** - LSP diagnostics and linting warnings

These tools provide deep code analysis and navigation when available. Use them for understanding large codebases and finding symbol relationships.

## CLAUDE.md Documentation Patterns

### File Reference Pattern (@)
- **Format**: `@relative/path/to/file.ts` - Must be relative from the CLAUDE.md file's location
- **Example**: In `multiselect/CLAUDE.md`, reference services as `@../../services/resources.service.ts`
- **Key Points**:
  - Paths are relative to the directory containing the CLAUDE.md file
  - Can traverse upwards with `../` notation
  - Files: Sources the file content into context
  - Folders: Lists files in the folder (doesn't source all contents)
  - Historical note: Previously had 3-levels deep constraint, appears relaxed now
- **Alternative**: Use regular Markdown links `[Description](path)` for documentation purposes without sourcing
- **Benefit**: Claude automatically pulls referenced files into context

### Hierarchical Context Loading
Claude automatically loads CLAUDE.md files hierarchically:
1. Component-specific: `src/app/component/CLAUDE.md` - loaded when files in that directory are opened
2. Project-specific: `project/CLAUDE.md` - loaded for the project
3. User-specific: `~/CLAUDE.local.md` - loaded globally (this file after chezmoi apply)

### Component-Specific Documentation
- Place CLAUDE.md files alongside components for automatic context loading
- Example: `src/app/resources/analytics/reports/CLAUDE.md`
- These files are automatically read when Claude opens files in the same directory
- Use for component-specific patterns, gotchas, or implementation notes
- No need to reference these in the main CLAUDE.md - they load contextually

## AI Agents (Subagents)

Claude Code automatically delegates to specialized agents based on task context:

### Language Experts
- **rails-expert**: Rails 7+, ActiveRecord, RSpec testing (auto: .rb files)
- **angular-primeng**: Angular 18, PrimeNG 17, Jest/Karma (auto: .ts files)  
- **go-services**: Go microservices, testing, concurrency (auto: .go files)

### Infrastructure
- **db-architect**: Database design, optimization, migrations
- **performance-profiler**: Bottleneck analysis, profiling, optimization

### Quality Assurance
- **code-reviewer**: Code quality, best practices, coverage
- **security-auditor**: Vulnerability scanning, OWASP compliance
- **api-designer**: API architecture, OpenAPI documentation

### Workflow
- **git-workflow**: Git operations, branching, PR management
- **docs-architect**: Documentation generation and maintenance

Explicit invocation: "Use the [agent-name] agent to..."
View available agents: Run `/agents` command

### Parallel Agent Execution
Launch multiple agents simultaneously for efficiency by calling them in a single message:
- Send all Task tool calls in one message to run agents in parallel
- Example: Creating documentation for multiple components at once
- Useful for independent tasks that don't depend on each other