#!/usr/bin/env bash
# Cursor settings merge script
# Merges Chezmoi-managed base settings with existing Cursor settings

set -euo pipefail

# Function to merge Chezmoi template with existing file
merge_cursor_file() {
    local template_path="$1"
    local dest_path="$2"
    local file_name="$3"
    
    echo "Processing $file_name..."
    
    # Ensure destination directory exists
    local dest_dir="$(dirname "$dest_path")"
    mkdir -p "$dest_dir"
    
    # Generate base file from Chezmoi template and remove comments
    echo "Generating base $file_name from template..."
    chezmoi execute-template -f "$template_path" | sed '/^[[:space:]]*\/\//d' > "/tmp/cursor-${file_name}-base.json"
    
    # Check if existing file exists
    if [[ -f "$dest_path" ]]; then
        echo "Found existing $file_name, merging..."
        
        # Remove comments from existing file and merge
        sed '/^[[:space:]]*\/\//d' "$dest_path" > "/tmp/cursor-${file_name}-existing.json"
        jq -s '.[0] * .[1]' "/tmp/cursor-${file_name}-base.json" "/tmp/cursor-${file_name}-existing.json" > "/tmp/cursor-${file_name}-merged.json"
        
        # Check for differences
        if ! diff -q "/tmp/cursor-${file_name}-merged.json" "$dest_path" > /dev/null; then
            echo "Changes detected in $file_name:"
            echo "======================================"
            {{- if lookPath "difft" }}
            difft "$dest_path" "/tmp/cursor-${file_name}-merged.json"
            {{- else }}
            diff "$dest_path" "/tmp/cursor-${file_name}-merged.json"
            {{- end }}
            echo "======================================"
            
            read -p "Apply these changes? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                cp "/tmp/cursor-${file_name}-merged.json" "$dest_path"
                echo "$file_name updated successfully."
            else
                echo "Changes cancelled."
            fi
        else
            echo "No changes detected in $file_name."
        fi
    else
        echo "No existing $file_name found, creating new file..."
        cp "/tmp/cursor-${file_name}-base.json" "$dest_path"
        echo "$file_name created successfully."
    fi
    
    # Cleanup
    rm -f "/tmp/cursor-${file_name}-base.json" "/tmp/cursor-${file_name}-merged.json" "/tmp/cursor-${file_name}-existing.json"
}

# Determine OS-specific Cursor paths
{{- if eq .chezmoi.os "darwin" }}
CURSOR_BASE_PATH="$HOME/Library/Application Support/Cursor/User"
{{- else if eq .chezmoi.os "linux" }}
CURSOR_BASE_PATH="$HOME/.config/Cursor/User"
{{- else }}
echo "Unsupported OS: {{ .chezmoi.os }}"
exit 1
{{- end }}

# Define files to process: template_path, dest_path, file_name
declare -a files=(
    "{{ .chezmoi.sourceDir }}/dot_cursor/settings.json.tmpl|$CURSOR_BASE_PATH/settings.json|settings"
    "{{ .chezmoi.sourceDir }}/dot_cursor/mcp.json.tmpl|$HOME/.cursor/mcp.json|mcp"
)

# Process each file
for file_config in "${files[@]}"; do
    IFS='|' read -r template_path dest_path file_name <<< "$file_config"
    merge_cursor_file "$template_path" "$dest_path" "$file_name"
done
