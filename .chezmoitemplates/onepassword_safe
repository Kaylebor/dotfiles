{{/* 
  Safe credential retrieval with fallback mechanism
  
  Usage: 
    {{- template "onepassword_safe" dict "opPath" "op://Private/item/field" "keychainAccount" "account" "keychainService" "service" "envVar" "CHEZMOI_FALLBACK_VAR" "context" . }}
  
  This template will try to retrieve credentials in the following order:
  1. Environment variable (fastest and most explicit)
  2. 1Password (unless skipped via skip1Password flag or CHEZMOI_SKIP_1PASSWORD env var)
  3. macOS Keychain (if on macOS and keychain parameters provided)
  4. Return empty string if all methods fail
  
  Parameters:
    - opPath: 1Password reference path (e.g., "op://Private/item/field")
    - keychainAccount: (optional) Account name for macOS Keychain
    - keychainService: (optional) Service name for macOS Keychain
    - envVar: Environment variable name for final fallback
    - context: Template context (should be ".")
*/}}
{{- $opPath := .opPath }}
{{- $keychainAccount := "" }}
{{- $keychainService := "" }}
{{- if hasKey . "keychainAccount" }}
{{-   $keychainAccount = .keychainAccount }}
{{- end }}
{{- if hasKey . "keychainService" }}
{{-   $keychainService = .keychainService }}
{{- end }}
{{- $envVar := .envVar }}
{{- $context := .context }}
{{- $result := "" }}

{{- /* Try environment variable first (fastest and most explicit) */ -}}
{{- $result = env $envVar }}

{{- /* Try 1Password if env var not set (unless skipped) */ -}}
{{- if not $result }}
{{-   if not $context.skip1Password }}
{{-     if and (lookPath "op") (not (env "CHEZMOI_SKIP_1PASSWORD")) }}
{{-       $opOutput := output "sh" "-c" (printf "op read '%s' 2>/dev/null || true" $opPath) | trim }}
{{-       if $opOutput }}
{{-         $result = $opOutput }}
{{-       end }}
{{-     end }}
{{-   end }}
{{- end }}

{{- /* Try macOS Keychain if 1Password didn't work */ -}}
{{- if not $result }}
{{-   if and (eq $context.chezmoi.os "darwin") $keychainAccount $keychainService (lookPath "security") }}
{{-     $keychainCmd := list "security" "find-generic-password" "-a" $keychainAccount "-s" $keychainService "-w" }}
{{-     $result = output "sh" "-c" (printf "%s 2>/dev/null || true" (join " " $keychainCmd)) | trim }}
{{-   end }}
{{- end }}

{{- $result -}}
