;; -*- lexical-binding: t; -*-

;; Suppress warnings
(setopt warning-minimum-level :error)

;; Setup elpaca package manager https://github.com/progfolio/elpaca/blob/master/doc/manual.md#usage
(load-file (expand-file-name "elpaca-init.el" user-emacs-directory))

;; Personal functions; some may be used in configurations
(load-file (expand-file-name "functions.el" user-emacs-directory))

{{- if eq .chezmoi.os "darwin" }}
;; macOS Keychain auth-source configuration (must be set before packages that use auth)
;; This enables Emacs to read credentials from macOS Keychain
(setq auth-sources '(macos-keychain-internet macos-keychain-generic "~/.authinfo.gpg"))
{{- end }}

;; PACKAGES
{{- if eq .chezmoi.os "darwin" }}
;; Template-based PATH setup for macOS (eliminates exec-path-from-shell runtime subprocess)
(setq exec-path '({{- range (env "PATH" | splitList ":") -}}"{{ . }}" {{ end }}))
(setenv "PATH" "{{ env "PATH" }}")
{{- else }}
;; Only load exec-path-from-shell in daemon mode on non-macOS
(when (daemonp) (elpaca exec-path-from-shell (exec-path-from-shell-initialize)))
{{- end }}

;; delight to hide or replace modeline information per-package
(use-package delight :ensure t)

;; yasnippet
(use-package yasnippet :ensure t
  :delight yas-minor-mode
  :init
  (yas-global-mode 1))

;; TreeSitter and lsp
(load-file (expand-file-name "syntax.el" user-emacs-directory))

;; transient
(use-package transient :ensure t)

;; websocket (required for claude-code-ide)
(use-package websocket :ensure t)

;; ripgrep
(use-package rg :ensure t
  :init
  (rg-enable-menu))

;; projectile
(use-package projectile :ensure t
  :delight
  :custom
  (projectile-keymap-prefix (kbd "C-x p"))
  (projectile-use-git-grep t)  ; Use git grep when in git repos
  (projectile-project-search-path '(("~/projects/" . 1) ("~/work/" . 1) ("~/playground" . 2)))
  (projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-emacs-directory))
  (projectile-cache-file (expand-file-name "projectile.cache" user-emacs-directory))
  (projectile-enable-caching t)  ; Enable caching for better performance
  (projectile-auto-discover t)  ; Automatically discover projects in search path
  (projectile-auto-cleanup-known-projects nil)  ; Don't auto-cleanup, it's too aggressive
  (projectile-indexing-method 'alien)  ; Use external tools (fd/rg) for better performance
  (projectile-sort-order 'recently-active)  ; Sort projects by recent activity
  :init
  ;; Enable projectile-mode and set up keymap before other packages can use it
  (projectile-mode +1)
  ;; Use default Emacs completion system (works with vertico/consult)
  (setq projectile-completion-system 'default)
  (with-eval-after-load 'projectile
    (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map))
  :config
  ;; Discover projects after initialization
  (add-hook 'elpaca-after-init-hook
            (lambda ()
              (projectile-discover-projects-in-search-path)
              (message "Discovered %d projects" (length projectile-known-projects))))
  ;; Save known projects on exit
  (add-hook 'kill-emacs-hook #'projectile-save-known-projects)
  ;; Add manual refresh command (without cleanup)
  (define-key projectile-command-map "r" 
              (lambda ()
                (interactive)
                (projectile-discover-projects-in-search-path)
                (message "Discovered projects. Total: %d projects" (length projectile-known-projects))))
  ;; Add manual cleanup + refresh command  
  (define-key projectile-command-map "R" 
              (lambda ()
                (interactive)
                (projectile-cleanup-known-projects)
                (projectile-discover-projects-in-search-path)
                (message "Cleaned and refreshed project list: %d projects" (length projectile-known-projects)))))

;; ANSI color support for various buffers
(use-package ansi-color :ensure nil  ; Built-in package
  :hook
  ;; Compilation buffers (cargo build, make, etc.)
  (compilation-filter . ansi-color-compilation-filter)
  :config
  ;; Shell and inferior modes
  (add-hook 'shell-mode-hook
            (lambda ()
              (add-hook 'comint-preoutput-filter-functions
                        'ansi-color-process-output nil t)))
  
  ;; Eshell
  (add-hook 'eshell-mode-hook
            (lambda ()
              (add-to-list 'eshell-output-filter-functions 
                           'ansi-color-process-output)))
  
  ;; Handle async shell command output
  (advice-add 'async-shell-command :after
              (lambda (&rest args)
                (let ((buffer (get-buffer "*Async Shell Command*")))
                  (when buffer
                    (with-current-buffer buffer
                      (add-hook 'after-change-functions 
                                (lambda (&rest _)
                                  (ansi-color-apply-on-region (point-min) (point-max)))
                                nil t)))))))

;; icons - using nerd-icons for consistency
(use-package nerd-icons :ensure t)

;; Alternative modeline; may change or build my own later
(use-package simple-modeline :ensure t
  :init
  (simple-modeline-mode))

;; treemacs for visual navigation
(use-package treemacs :ensure t)
(use-package treemacs-projectile :ensure t)
(use-package treemacs-magit :ensure t)
(use-package treemacs-nerd-icons :ensure t
  :config
  (treemacs-load-theme "nerd-icons")
  ;; Enable automatic project following when switching buffers
  (treemacs-project-follow-mode 1))

;; Modern completion framework stack
(use-package vertico :ensure t
  :custom
  (vertico-cycle t)  ; Enable cycling for `vertico-next/previous'
  :init
  (vertico-mode))

(use-package consult :ensure t
  :init
  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  :config
  ;; Configure project buffer support - consult-buffer will automatically include project buffers
  ;; Add project buffer switching with C-x p b
  (define-key global-map (kbd "C-x p b") 
              (lambda () (interactive) 
                (let ((consult-buffer-sources '(consult--source-project-buffer)))
                  (consult-buffer)))))

(use-package marginalia :ensure t
  :init
  (marginalia-mode))

(use-package orderless :ensure t
  :custom
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (orderless-style-dispatchers '(+orderless-dispatch))
  ;; (orderless-component-separator #'orderless-escapable-split-on-space)
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))

(use-package embark :ensure t
  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)
  )

(use-package embark-consult :ensure t
  :after (embark consult)
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))


;; Add nerd-icons support for completion frameworks
(use-package nerd-icons-completion :ensure t
  :after nerd-icons
  :config
  (nerd-icons-completion-mode))


;; Bookmarks configuration
(use-package bookmark
  :custom
  (bookmark-default-file (expand-file-name "bookmarks" user-emacs-directory))
  (bookmark-save-flag 1)) ; Auto-save after each bookmark

;; Emacs minibuffer configurations.
(use-package emacs
  :custom
  ;; Support opening new minibuffers from inside existing minibuffers.
  (enable-recursive-minibuffers t)
  ;; Hide commands in M-x which do not work in the current mode.  Vertico
  ;; commands are hidden in normal buffers. This setting is useful beyond
  ;; Vertico.
  (read-extended-command-predicate #'command-completion-default-include-p)
  ;; Do not allow the cursor in the minibuffer prompt
  (minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt)))

;; Terminal emulators
;; eat - Pure elisp terminal emulator (no compilation needed)
(use-package eat :ensure t)

;; vterm - DISABLED to avoid compilation issues on macOS
;; (use-package vterm :ensure t
;;   :config
;;   ;; Prevent Emacs-in-Emacs deadlock when git tries to open an editor
;;   (add-hook 'vterm-mode-hook
;;             (lambda ()
;;               (setq-local vterm-environment
;;                           (append '("EDITOR=nvim"  ; Use nvim as fallback editor in vterm
;;                                     "GIT_EDITOR=nvim"
;;                                     "VISUAL=nvim")
;;                                   vterm-environment)))))


;; Claude Code IDE integration
(elpaca (claude-code-ide 
         :host github 
         :repo "manzaltu/claude-code-ide.el")
  (use-package claude-code-ide
    :custom
    ;; Use eat as terminal backend (pure elisp, no compilation needed)
    (claude-code-ide-terminal-backend 'eat)
    ;; Claude CLI is available via mise - use executable-find to locate it
    (claude-code-ide-cli-executable (executable-find "claude"))
    ;; Optional: Enable debug mode initially to verify setup
    (claude-code-ide-debug-mode t)
    :config
    ;; Enable Emacs tools integration for advanced features
    (claude-code-ide-emacs-tools-setup)
    
    ;; Optional: Customize window placement
    (setq claude-code-ide-window-placement 'right)
    
    ;; Ensure mise environment is properly inherited by Claude's bash shells
    (defun my/claude-code-terminal-setup (orig-fun &rest args)
      "Wrap terminal creation to ensure mise environment is available."
      ;; Refresh mise environment for current project before launching
      (when (and (boundp 'mise-mode) mise-mode)
        (mise-refresh-environment))
      ;; Make sure bash sources the rc file for non-interactive shells
      ;; This ensures mise is activated when Claude runs bash commands
      (let ((process-environment 
             (cons "BASH_ENV=~/.bashrc" process-environment)))
        (apply orig-fun args)))
    
    ;; Wrap the terminal creation function
    (advice-add 'claude-code-ide--create-terminal :around #'my/claude-code-terminal-setup)))

;; Claude Code IDE MCP Tools - Comprehensive development tools (40+ tools)
(elpaca (claude-code-ide-mcp-tools
         :host github
         :repo "Kaylebor/claude-code-ide-mcp-tools")
  (use-package claude-code-ide-mcp-tools
    :after claude-code-ide
    :config
    ;; Enable all 40+ MCP tools for comprehensive development workflow
    (claude-code-ide-mcp-tools-setup)))

;; magit
(use-package magit :ensure t
  :custom
  {{- if and (eq .chezmoi.os "darwin") (stat "/Applications/Xcode.app/Contents/Developer/usr/bin/git") }}
  ;; On macOS, use the faster Xcode Git
  (magit-git-executable "/Applications/Xcode.app/Contents/Developer/usr/bin/git")
  {{- end }}
  ;; Show word-level differences within changed lines
  (magit-diff-refine-hunk t)
  ;; Reuse current window except for diffs
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

;; Forge - Work with GitHub, GitLab, and other Git forges from Magit
(use-package forge :ensure t
  :after magit
  :config
  {{- if eq .chezmoi.os "darwin" }}
  ;; On macOS, auth-source should already be configured to use Keychain
  ;; Ensure cached auth info is cleared when Forge loads
  (auth-source-forget-all-cached)
  {{- end }}
  ;; Optional: Configure default forge list behavior
  (setq forge-topic-list-limit '(60 . 0))  ; Show 60 open PRs/issues, 0 closed
  (setq forge-pull-notifications t))

;; Structural diff with difftastic
(use-package difftastic :ensure t
  :demand t
  :config
  (eval-after-load 'magit-diff
    '(transient-append-suffix 'magit-diff '(-1 -1)
       [("D" "Difftastic diff (dwim)" difftastic-magit-diff)
        ("S" "Difftastic show" difftastic-magit-show)])))

;; Better help system
(use-package helpful :ensure t)

;; which-key for command discovery
(use-package which-key :ensure t
  :defer 0.1
  :delight
  :custom
  ;; Show more descriptive names for prefixes
  (which-key-show-prefix 'bottom)
  (which-key-show-remaining-keys t)
  ;; Clean up confusing keymap names
  (which-key-replacement-alist
   '((("\\`\\+\\(.+\\)\\'" nil nil) . (nil nil "\\1"))
     (("\\`ctl-x-\\(.+\\)\\'" nil nil) . (nil nil "\\1"))))
  :init
  (which-key-mode))

  ;; Code folding based on newer treesit.el
  (use-package treesit-fold :ensure t
    :delight
    :custom
    (treesit-fold-line-count-show t)
    :init
    (global-treesit-fold-mode)
    (global-treesit-fold-indicators-mode)
    )

  (use-package grip-mode :ensure t
    :custom
    (grip-command 'go-grip) ;; auto, grip, go-grip or mdopen
    :hook (markdown-ts-mode . grip-mode))

  ;; Quick navigation with Avy
  (use-package avy :ensure t
    :custom
    (avy-timeout-seconds 0.5)
    )

  ;; Incremental text selection
  (use-package expand-region :ensure t)

  ;; Spelling
  (use-package jinx :ensure t)

  {{- if eq .chezmoi.os "linux" }}
  ;; dock.el - Desktop environment dock integration for Unity-compatible desktops
  (when (member (getenv "XDG_CURRENT_DESKTOP") '("KDE" "GNOME" "Unity" "ubuntu:GNOME"))
    (use-package dock :ensure t))
  {{- end }}

  ;; Better mise integration with Emacs
  (use-package mise :ensure t
    :delight
    :init
    (global-mise-mode))

  {{- if not .skip1Password }}
  ;; 1Password integration
  (elpaca (auth-source-1password :host github :repo "dlobraico/auth-source-1password" :build t)
    (auth-source-1password-enable))
  {{- end }}

  ;; Org Babel: Mermaid support (diagram rendering via mmdc)
  (use-package ob-mermaid
    :ensure (:host github :repo "arnm/ob-mermaid")
    :after org
    :init
    ;; Ensure mermaid is included in org-babel languages without clobbering others
    (with-eval-after-load 'org
      (add-to-list 'org-babel-load-languages '(mermaid . t)))
    :config
    ;; Load languages now (merges with existing list)
    (when (fboundp 'org-babel-do-load-languages)
      (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))
    ;; Prefer mise-managed mmdc if available
    (when (boundp 'ob-mermaid-cli-path)
      (setq ob-mermaid-cli-path
            (or (and (fboundp 'my-mise-which) (my-mise-which "mmdc"))
                (executable-find "mmdc")))))

  ;; GPT and family
  (load-file (expand-file-name "gptel-init.el" user-emacs-directory))

  ;; Emojis
  (use-package emojify :ensure t
    :custom
    (emojify-emoji-styles '(unicode github))
    (emojify-display-style 'unicode)
    :init
    (global-emojify-mode))

  ;; Theme
  (use-package dracula-theme :ensure t) ;; Needed, as catppuccin-theme depends on it
  (use-package catppuccin-theme :ensure (:wait t)
    :custom
    (catppuccin-flavor 'frappe)
    :init
    (load-theme 'catppuccin :no-confirm))

  ;; Window management configuration
  (load-file (expand-file-name "window-management.el" user-emacs-directory))

  ;; Modal editing configuration
{{- if eq .modalEditingMode "meow" }}
  ;; Meow: Modern modal editing with better Emacs integration (no vterm/Magit conflicts)
  (load-file (expand-file-name "meow-config.el" user-emacs-directory))
{{- else if eq .modalEditingMode "evil" }}
  ;; Evil: Vim emulation (powerful but can cause conflicts with some packages)
  (load-file (expand-file-name "evil-config.el" user-emacs-directory))
{{- else }}
  ;; No modal editing configured
{{- end }}

  ;; Keybindings will be loaded after all packages are ready via elpaca-after-init-hook

  ;; Elpaca queues are processed via after-init-hook in elpaca-init.el

  ;; Performance optimizations

  ;; Reset GC threshold after startup for better runtime performance
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold (* 20 1024 1024)  ; 20MB
                    gc-cons-percentage 0.1)
              (message "GC threshold reset to %s" gc-cons-threshold)))

  ;; Pixel-precision scrolling configured in custom.el

  ;; Disable vc-mode entirely since we use Magit exclusively
  (setq vc-handled-backends nil)

  {{- if eq .chezmoi.os "darwin" }}
  ;; macOS-specific optimizations
  ;; Smoother scrolling on macOS (Mac Port specific)
  (setq mac-mouse-wheel-smooth-scroll t)

  ;; Optimize for macOS window management
  (setq ns-use-native-fullscreen t)
  (setq ns-pop-up-frames nil)

  ;; Faster frame switching
  (setq frame-title-format nil)
  {{- end }}

  ;; Hide some Emacs-native modes from modeline
  (with-eval-after-load 'delight
    (delight '((eldoc-mode nil "eldoc"))))

  ;; Disable menu bar
  (menu-bar-mode -1)

  ;; Auto-install icon fonts after Elpaca finishes (if needed)
  (with-eval-after-load 'elpaca
    (add-hook 'elpaca-after-init-hook
              (lambda ()
                ;; Check and install nerd-icons fonts if package is available
                (when (and (require 'nerd-icons nil t)
                           (fboundp 'nerd-icons-install-fonts))
                  ;; Check if any Nerd Font is installed by looking for common patterns
                  (unless (seq-find (lambda (font) 
                                      (string-match-p "\\(Nerd Font\\|NFM\\|NF\\)" font))
                                    (font-family-list))
                    (message "Installing nerd-icons fonts...")
                    (nerd-icons-install-fonts t))))
              ;; Run after other init hooks with lower priority
              90)
    
    ;; Load all keybindings after packages are ready
    (add-hook 'elpaca-after-init-hook
              (lambda ()
                (message "Loading keybindings configuration...")
                (load-file (expand-file-name "keybindings.el" user-emacs-directory)))
              95) ; Priority 95 to run after font installation

    ;; Load which-key replacements after all keybindings are set
    (add-hook 'elpaca-after-init-hook
              (lambda ()
                (when (featurep 'which-key)
                  (message "Loading which-key replacements...")
                  (load-file (expand-file-name "which-key-replacements.el" user-emacs-directory))))
              99)) ; Priority 99 to run after keybindings - close with-eval-after-load

;; Customization
(setopt custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file 'noerror)
