;; -*- lexical-binding: t; -*-

;; Suppress warnings
(setopt warning-minimum-level :error)

;; Setup elpaca package manager https://github.com/progfolio/elpaca/blob/master/doc/manual.md#usage
(load-file (expand-file-name "elpaca-init.el" user-emacs-directory))

;; Personal functions; some may be used in configurations
(load-file (expand-file-name "functions.el" user-emacs-directory))

;; PACKAGES
{{- if eq .chezmoi.os "darwin" }}
;; Improves some MacOS defaults
(elpaca exec-path-from-shell (exec-path-from-shell-initialize))
{{- else }}
;; Only load exec-path-from-shell in daemon mode on non-macOS
(when (daemonp) (elpaca exec-path-from-shell (exec-path-from-shell-initialize)))
{{- end }}

;; delight to hide or replace modeline information per-package
(use-package delight :ensure t)

;; yasnippet
(use-package yasnippet :ensure t
  :delight yas-global-mode
  :init
  (yas-global-mode 1))

;; TreeSitter and lsp
(load-file (expand-file-name "syntax.el" user-emacs-directory))

;; transient
(use-package transient :ensure t)

;; websocket (required for claude-code-ide)
(use-package websocket :ensure t)

;; ripgrep
(use-package rg :ensure t
  :init
  (rg-enable-menu))

;; projectile
(use-package projectile :ensure t
  :delight
  :custom
  (projectile-keymap-prefix (kbd "C-x p"))
  (projectile-use-git-grep t)  ; Use git grep when in git repos
  (projectile-project-search-path '(("~/projects/" . 1) ("~/work/" . 1) ("~/playground" . 2)))
  (projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-emacs-directory))
  (projectile-cache-file (expand-file-name "projectile.cache" user-emacs-directory))
  (projectile-enable-caching t)  ; Enable caching for better performance
  (projectile-auto-discover t)  ; Automatically discover projects in search path
  (projectile-auto-cleanup-known-projects nil)  ; Don't auto-cleanup, it's too aggressive
  (projectile-indexing-method 'alien)  ; Use external tools (fd/rg) for better performance
  (projectile-sort-order 'recently-active)  ; Sort projects by recent activity
  :init
  ;; Enable projectile-mode and set up keymap before other packages can use it
  (projectile-mode +1)
  ;; Use default Emacs completion system (works with vertico/consult)
  (setq projectile-completion-system 'default)
  (with-eval-after-load 'projectile
    (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map))
  :config
  ;; Discover projects after initialization
  (add-hook 'elpaca-after-init-hook
            (lambda ()
              (projectile-discover-projects-in-search-path)
              (message "Discovered %d projects" (length projectile-known-projects))))
  ;; Save known projects on exit
  (add-hook 'kill-emacs-hook #'projectile-save-known-projects)
  ;; Add manual refresh command (without cleanup)
  (define-key projectile-command-map "r" 
    (lambda ()
      (interactive)
      (projectile-discover-projects-in-search-path)
      (message "Discovered projects. Total: %d projects" (length projectile-known-projects))))
  ;; Add manual cleanup + refresh command  
  (define-key projectile-command-map "R" 
    (lambda ()
      (interactive)
      (projectile-cleanup-known-projects)
      (projectile-discover-projects-in-search-path)
      (message "Cleaned and refreshed project list: %d projects" (length projectile-known-projects)))))

;; icons - using nerd-icons for consistency
(use-package nerd-icons :ensure t)

;; Alternative modeline; may change or build my own later
(use-package simple-modeline :ensure t
  :init
  (simple-modeline-mode))

;; treemacs for visual navigation
(use-package treemacs :ensure t
  :bind
  (("C-x t" . treemacs)))
(use-package treemacs-evil :ensure t)
(use-package treemacs-projectile :ensure t)
(use-package treemacs-magit :ensure t)
(use-package treemacs-nerd-icons :ensure t
  :config
  (treemacs-load-theme "nerd-icons"))

;; Modern completion framework stack
(use-package vertico :ensure t
  :custom
  (vertico-cycle t)  ; Enable cycling for `vertico-next/previous'
  :init
  (vertico-mode))

(use-package consult :ensure t
  :bind (("C-x b" . consult-buffer)
         ("M-g g" . consult-goto-line)
         ("M-g M-g" . consult-goto-line)
         ("M-s l" . consult-line)         ; Standard consult-line binding
         ("M-s f" . consult-find)
         ("M-s r" . consult-ripgrep)
         ("M-y" . consult-yank-pop))
  :init
  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  :config
  ;; Configure project buffer support - consult-buffer will automatically include project buffers
  ;; Add project buffer switching with C-x p b
  (define-key global-map (kbd "C-x p b") 
    (lambda () (interactive) 
      (let ((consult-buffer-sources '(consult--source-project-buffer)))
        (consult-buffer)))))

(use-package marginalia :ensure t
  :init
  (marginalia-mode))

(use-package orderless :ensure t
  :custom
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (orderless-style-dispatchers '(+orderless-dispatch))
  ;; (orderless-component-separator #'orderless-escapable-split-on-space)
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))

(use-package embark :ensure t
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command))

(use-package embark-consult :ensure t
  :after (embark consult)
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

;; Add nerd-icons support for completion frameworks
(use-package nerd-icons-completion :ensure t
  :after nerd-icons
  :config
  (nerd-icons-completion-mode))


;; Emacs minibuffer configurations.
(use-package emacs
  :custom
  ;; Support opening new minibuffers from inside existing minibuffers.
  (enable-recursive-minibuffers t)
  ;; Hide commands in M-x which do not work in the current mode.  Vertico
  ;; commands are hidden in normal buffers. This setting is useful beyond
  ;; Vertico.
  (read-extended-command-predicate #'command-completion-default-include-p)
  ;; Do not allow the cursor in the minibuffer prompt
  (minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt)))

;; Terminal emulators
(use-package vterm :ensure t
  :bind
  (("C-c t" . vterm)))

;; eat - Emulate A Terminal (for claude-code-ide)
(use-package eat :ensure t)

;; Claude Code IDE integration
(elpaca (claude-code-ide 
         :host github 
         :repo "manzaltu/claude-code-ide.el")
  (use-package claude-code-ide
    :bind ("C-c C-'" . claude-code-ide-menu)
    :custom
    ;; Use eat as terminal backend for better evil-mode integration and smoother display
    (claude-code-ide-terminal-backend 'eat)
    ;; Claude CLI is available via mise - use executable-find to locate it
    (claude-code-ide-cli-executable (executable-find "claude"))
    ;; Optional: Enable debug mode initially to verify setup
    (claude-code-ide-debug-mode t)
    :config
    ;; Enable Emacs tools integration for advanced features
    (claude-code-ide-emacs-tools-setup)
    ;; Optional: Customize window placement
    (setq claude-code-ide-window-placement 'right)
    
    ;; Ensure mise environment is properly inherited by Claude's bash shells
    (defun my/claude-code-terminal-setup (orig-fun &rest args)
      "Wrap terminal creation to ensure mise environment is available."
      ;; Refresh mise environment for current project before launching
      (when (and (boundp 'mise-mode) mise-mode)
        (mise-refresh-environment))
      ;; Make sure bash sources the rc file for non-interactive shells
      ;; This ensures mise is activated when Claude runs bash commands
      (let ((process-environment 
             (cons "BASH_ENV=~/.bashrc" process-environment)))
        (apply orig-fun args)))
    
    ;; Wrap the terminal creation function
    (advice-add 'claude-code-ide--create-terminal :around #'my/claude-code-terminal-setup)))

;; magit
(use-package magit :ensure t
  :custom
  {{- if and (eq .chezmoi.os "darwin") (stat "/Applications/Xcode.app/Contents/Developer/usr/bin/git") }}
  ;; On macOS, use the faster Xcode Git
  (magit-git-executable "/Applications/Xcode.app/Contents/Developer/usr/bin/git")
  {{- end }}
  ;; Show word-level differences within changed lines
  (magit-diff-refine-hunk t))

;; which-key for command discovery
(use-package which-key :ensure t
  :delight
  :init
  (which-key-mode))

;; Code folding based on newer treesit.el
(use-package treesit-fold :ensure t
  :delight
  :bind
  (:map treesit-fold-mode-map
    ("C-c C-f" . treesit-fold-toggle)
    ("C-c C-u" . treesit-fold-unfold-all)
    ("C-c C-r" . treesit-fold-rebuild))
  :custom
  (treesit-fold-line-count-show t)
  :init
  (global-treesit-fold-mode)
  (global-treesit-fold-indicators-mode))

(use-package grip-mode :ensure t
  :custom
  (grip-command 'go-grip) ;; auto, grip, go-grip or mdopen
  :hook (markdown-ts-mode . grip-mode))

;; Spelling
(use-package jinx :ensure t)

;; Better mise integration with Emacs
(use-package mise :ensure t
  :delight
  :init
  (global-mise-mode))

;; 1Password integration
(elpaca (auth-source-1password :host github :repo "dlobraico/auth-source-1password" :build t)
  (auth-source-1password-enable))

;; GPT and family
(load-file (expand-file-name "gptel-init.el" user-emacs-directory))

;; Emojis
(use-package emojify :ensure t
  :custom
  (emojify-emoji-styles '(unicode github))
  (emojify-display-style 'unicode)
  :init
  (global-emojify-mode))

;; Theme
(use-package dracula-theme :ensure t) ;; Needed, as catppuccin-theme depends on it
(use-package catppuccin-theme :ensure t
  :custom
  (catppuccin-flavor 'frappe)
  :init
  (load-theme 'catppuccin :no-confirm))

;; Keybindings go here
(load-file (expand-file-name "keybindings.el" user-emacs-directory))

;; Manually process elpaca queues now before loading customizations
;; Keybindings may go above this line if they depend on extra packages
(elpaca-process-queues)

;; Performance optimizations

;; Reset GC threshold after startup for better runtime performance
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold (* 20 1024 1024)  ; 20MB
                  gc-cons-percentage 0.1)
            (message "GC threshold reset to %s" gc-cons-threshold)))

;; Better pixel-precision scrolling (Emacs 29+) - benefits all platforms
(when (fboundp 'pixel-scroll-precision-mode)
  (pixel-scroll-precision-mode 1)
  (setq pixel-scroll-precision-interpolate-page t))

;; Version control optimizations - only track Git
(setq vc-handled-backends '(Git))

{{- if eq .chezmoi.os "darwin" }}
;; macOS-specific optimizations
;; Smoother scrolling on macOS (Mac Port specific)
(setq mac-mouse-wheel-smooth-scroll t)

;; Optimize for macOS window management
(setq ns-use-native-fullscreen t)
(setq ns-pop-up-frames nil)

;; Faster frame switching
(setq frame-title-format nil)
{{- end }}

;; Hide some Emacs-native modes from modeline
(with-eval-after-load 'delight
  (delight '((eldoc-mode nil "eldoc"))))

;; Disable menu bar
(menu-bar-mode -1)

;; Auto-install icon fonts after Elpaca finishes (if needed)
(with-eval-after-load 'elpaca
  (add-hook 'elpaca-after-init-hook
            (lambda ()
              ;; Check and install nerd-icons fonts if package is available
              (when (and (require 'nerd-icons nil t)
                         (fboundp 'nerd-icons-install-fonts))
                ;; Check if any Nerd Font is installed by looking for common patterns
                (unless (seq-find (lambda (font) 
                                    (string-match-p "\\(Nerd Font\\|NFM\\|NF\\)" font))
                                  (font-family-list))
                  (message "Installing nerd-icons fonts...")
                  (nerd-icons-install-fonts t))))
            ;; Run after other init hooks with lower priority
            90))

;; Customization
(setopt custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file 'noerror)
