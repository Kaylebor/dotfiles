;; -*- lexical-binding: t; -*-
;; Meow modal editing configuration

(use-package meow :ensure t
  :demand t  ; Force immediate loading instead of lazy loading
  :config
  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))
  
  ;; Enable meow globally
  (meow-setup)
  
  ;; Custom keybindings using KEYPAD state for AI tools
  ;; Access with SPC in NORMAL mode
  (meow-leader-define-key
   '("l l" . gptel-menu)
   '("l s" . gptel-send) 
   '("l a" . gptel-add)
   '("l f" . gptel-add-file)
   '("l d" . gptel-multimodal-debug)
   '("l p" . gptel-quick-preset)
   '("l g" . aidermacs-transient-menu)
   ;; Claude Code IDE
   '("l c" . claude-code-ide-menu)
   '("l C" . claude-code-ide)
   '("l r" . claude-code-ide-resume)
   '("l b" . claude-code-ide-switch-to-buffer)
   '("l q" . claude-code-ide-stop)
   '("l w" . claude-code-ide-toggle-window))
  
  ;; Additional useful bindings
  (meow-normal-define-key
   '("z a" . treesit-fold-toggle)  ; Folding
   '("g s" . avy-goto-char-timer)  ; Avy jump
   '("M-?" . which-key-show-top-level))
  
  ;; For sending selection to Claude
  (meow-leader-define-key
   '("l i" . claude-code-ide-insert-at-mentioned))
  
  ;; Ensure Meow doesn't interfere with vterm
  (add-hook 'vterm-mode-hook
            (lambda ()
              (setq-local meow-normal-state-keymap (make-sparse-keymap))
              (meow-insert-mode)))
  
  ;; Start in motion mode for read-only buffers
  (add-hook 'read-only-mode-hook
            (lambda ()
              (when read-only-mode
                (meow-motion-mode))))
  
  (meow-global-mode 1))

(provide 'meow-config)