;; -*- lexical-binding: t; -*-

(use-package tree-sitter :ensure t
  :defer t  ; Don't load until needed
  :init
  ;; Add treesitter grammars so Emacs knows where to find them
  (setopt treesit-language-source-alist'((bash "https://github.com/tree-sitter/tree-sitter-bash" "v0.23.3")
                                         (cmake "https://github.com/uyha/tree-sitter-cmake" "v0.5.0")
                                         (css "https://github.com/tree-sitter/tree-sitter-css" "v0.23.2")
                                         (elixir "https://github.com/elixir-lang/tree-sitter-elixir" "v0.3.4")
                                         (elisp "https://github.com/Wilfred/tree-sitter-elisp" "main")
                                         (go "https://github.com/tree-sitter/tree-sitter-go" "v0.23.4")
                                         (gomod "https://github.com/camdencheek/tree-sitter-go-mod" "v1.1.0")
                                         (gosum "https://github.com/tree-sitter-grammars/tree-sitter-go-sum" "v1.0.0")
                                         (gdscript "https://github.com/PrestonKnopp/tree-sitter-gdscript" "v2.0.0")
                                         (ruby "https://github.com/tree-sitter/tree-sitter-ruby" "v0.23.1")
                                         (sql "https://github.com/DerekStride/tree-sitter-sql" "gh-pages")
                                         (html "https://github.com/tree-sitter/tree-sitter-html" "v0.23.2")
                                         (jsx "https://github.com/tree-sitter/tree-sitter-javascript" "v0.23.1" "src")
                                         (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "v0.23.1" "src")
                                         (json "https://github.com/tree-sitter/tree-sitter-json" "v0.24.8")
                                         (make "https://github.com/alemuller/tree-sitter-make" "main")
                                         (markdown "https://github.com/ikatyang/tree-sitter-markdown" "v0.7.1")
                                         (python "https://github.com/tree-sitter/tree-sitter-python" "v0.23.6")
                                         (rust "https://github.com/tree-sitter/tree-sitter-rust" "v0.24.0")
                                         (toml "https://github.com/tree-sitter/tree-sitter-toml" "v0.5.1")
                                         (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "v0.23.2" "tsx/src")
                                         (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "v0.23.2" "typescript/src")
                                         (yaml "https://github.com/ikatyang/tree-sitter-yaml" "v0.5.0")
                                         (hcl "https://github.com/tree-sitter-grammars/tree-sitter-hcl" "v1.1.0")))
  ;; Map built-in modes to their tree-sitter equivalents
  (setq major-mode-remap-alist
        '((ruby-mode . ruby-ts-mode)
          (python-mode . python-ts-mode)
          (js-mode . javascript-ts-mode)
          (css-mode . css-ts-mode)
          (html-mode . html-ts-mode)
          (json-mode . json-ts-mode)
          (sh-mode . bash-ts-mode))))

(use-package ruby-ts-mode
  :ensure nil  ; Built-in mode
  :defer t
  :delight)

(use-package emacs-lisp-mode
  :ensure nil  ; Built-in mode
  :delight
  :mode ("\\.el\\'" . emacs-lisp-mode))

(use-package bash-ts-mode
  :ensure nil  ; Built-in mode
  :defer t
  :delight)
(use-package sh-mode
  :ensure nil  ; Built-in mode
  :delight
  :mode ("\\.fish\\(rc\\)?\\'" . sh-mode))

(use-package json-ts-mode
  :ensure nil  ; Built-in mode
  :defer t
  :delight)
(use-package yaml-ts-mode
  :ensure nil  ; Built-in mode
  :delight
  :mode ("\\.\\(ya?ml\\)\\(?:-cpp\\)?\\'" . yaml-ts-mode))
(use-package toml-ts-mode
  :ensure nil  ; Built-in mode
  :delight
  :mode ("\\.toml\\'" . toml-ts-mode))

(use-package sql-ts-mode
  :ensure nil  ; Built-in mode
  :delight
  :mode ("\\.sql\\'" . sql-ts-mode))
(use-package dbml-mode
  :ensure t  ; External package
  :delight
  :mode ("\\.dbml\\'" . dbml-mode))

(use-package hcl-ts-mode
  :ensure nil  ; Built-in mode
  :delight
  :mode ("\\.hcl[2-4]?\\'" . hcl-ts-mode))

(use-package markdown-ts-mode
  :ensure nil  ; Built-in mode
  :delight
  :mode ("\\.md\\'" . markdown-ts-mode))

(use-package html-ts-mode
  :ensure nil  ; Built-in mode
  :defer t
  :delight)
(use-package css-ts-mode
  :ensure nil  ; Built-in mode
  :defer t
  :delight)
(use-package javascript-ts-mode
  :ensure nil  ; Built-in mode
  :delight
  :mode (("\\.jsx\\'" . js-jsx-mode)))  ; jsx still needs explicit mode

(use-package typescript-ts-mode
  :ensure nil  ; Built-in mode, don't try to install
  :delight
  :mode (("\\.ts\\'" . typescript-ts-mode)
         ("\\.tsx\\'" . tsx-ts-mode)))

(use-package elixir-ts-mode
  :ensure nil  ; Built-in mode
  :delight
  :mode ("\\.\\(ex\\|exs\\|eex\\|leex\\|heex\\)\\'" . elixir-ts-mode))
(use-package python-ts-mode
  :ensure nil  ; Built-in mode
  :defer t
  :delight)
(use-package rust-ts-mode
  :ensure nil  ; Built-in mode
  :delight
  :mode ("\\.rs\\'" . rust-ts-mode))
(use-package go-ts-mode
  :ensure nil  ; Built-in mode
  :delight
  :mode ("\\(\\.go\\|/go\\.mod\\|/go\\.sum\\)\\'" . go-ts-mode))

(use-package gdscript-mode :ensure (:host github :repo "godotengine/emacs-gdscript-mode") :delight :mode ("\\.gd\\'" . gdscript-ts-mode))

;; Linting - only activate in programming modes
(use-package flycheck :ensure t
  :delight
  :hook (prog-mode . flycheck-mode)  ; Lazy load for programming modes only
  :config
  ;; Disable Ruby checkers that overlap with Ruby LSP
  (setq-default flycheck-disabled-checkers '(ruby-rubocop ruby-standard)))

;; LSP support
(use-package lsp-mode :ensure t
  :delight
  :defer t  ; Don't load until a supported mode activates
  :custom
  (setopt lsp-keymap-prefix "C-c l")
  (lsp-keep-workspace-alive nil) ;; close LSP servers after last buffer is closed
  (lsp-ruby-lsp-use-bundler nil) ;; use global ruby-lsp with composed bundle
  :hook
  (ruby-ts-mode . lsp)
  (html-ts-mode . lsp)
  (typescript-ts-mode . lsp)
  (go-ts-mode . lsp)
  (elixir-ts-mode . lsp)
  (gdscript-ts-mode . lsp)
  (rust-ts-mode . lsp)
  (lsp-mode . lsp-enable-which-key-integration)
  :config
  ;; Ensure TypeScript is found properly
  (setq lsp-clients-typescript-server-args '("--stdio"))
  (setq lsp-typescript-npm (executable-find "npm"))
  
  ;; Configure Angular language server
  (setq lsp-clients-angular-language-server-command
        `("ngserver"
          "--stdio"
          "--tsProbeLocations" ,(concat (getenv "HOME") "/.local/share/mise/installs/node/")
          "--ngProbeLocations" ,(concat (getenv "HOME") "/.local/share/mise/installs/node/")))
  
  ;; Disable TypeProf and default ruby-lsp to avoid conflicts
  (add-to-list 'lsp-disabled-clients 'typeprof-ls)
  (add-to-list 'lsp-disabled-clients 'ruby-lsp-ls)
  ;; Register custom ruby-lsp client with launcher for dependency handling
  (lsp-register-client
   (make-lsp-client
    :new-connection (lsp-stdio-connection 
                     (lambda () 
                       (let ((default-directory (or (lsp-workspace-root) default-directory)))
                         (list (my-mise-which "ruby-lsp") "--use-launcher"))))
    :activation-fn (lsp-activate-on "ruby")
    :priority 10
    :server-id 'ruby-lsp-mise))
  
  (defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
    "Prepend emacs-lsp-booster command to lsp CMD."
    (let ((orig-result (funcall old-fn cmd test?)))
      (if (and (not test?)                             ;; for check lsp-server-present?
               (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
               lsp-use-plists
               (not (functionp 'json-rpc-connection))  ;; native json-rpc
               (executable-find "emacs-lsp-booster"))
          (progn
            (when-let* ((command-from-exec-path (executable-find (car orig-result))))  ;; resolve command from exec-path (in case not found in $PATH)
              (setcar orig-result command-from-exec-path))
            (message "Using emacs-lsp-booster for %s!" orig-result)
            (append '("emacs-lsp-booster" "--disable-bytecode" "--") orig-result))
        orig-result)))
  (advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command))

{{- if .prewarmRubyLSP }}
;; Prewarm Ruby LSP server configuration
(with-eval-after-load 'lsp-mode
  (defun my/prewarm-ruby-lsp-on-startup ()
    "Start Ruby LSP server in the background without opening a visible buffer.
This is intended to be run on startup to avoid delays when opening the first Ruby file."
    (when (and (executable-find "ruby-lsp")
               (not (seq-find (lambda (ws)
                                (string-match-p "ruby-lsp" (lsp--workspace-print ws)))
                              (lsp-workspaces))))
      ;; Create a dedicated directory for prewarming to avoid /tmp project detection
      (let* ((prewarm-dir (expand-file-name "lsp-prewarm" user-emacs-directory))
             (_ (make-directory prewarm-dir t))
             (temp-file (expand-file-name "ruby-prewarm.rb" prewarm-dir))
             (buf (find-file-noselect temp-file t)))
        ;; Add to LSP session blocklist to prevent "import project" prompts
        (when (boundp 'lsp-session-folders-blocklist)
          (add-to-list 'lsp-session-folders-blocklist prewarm-dir))
        (with-current-buffer buf
          (ruby-ts-mode)
          (condition-case err
              (progn
                ;; Start LSP with minimal features
                (let ((lsp-auto-guess-root t)
                      (lsp-enable-file-watchers nil))
                  (lsp))
                (message "Ruby LSP server prewarmed successfully"))
            (error (message "Failed to prewarm Ruby LSP: %s" err)))
          ;; Clean up buffer immediately, but keep server running
          (kill-buffer buf))
        ;; Clean up file after a delay
        (run-at-time "5 sec" nil
                     (lambda ()
                       (ignore-errors
                         (delete-file temp-file))))))))

;; Add elpaca-after-init-hook to run prewarming after all packages are loaded
(add-hook 'elpaca-after-init-hook
          (lambda ()
            (run-at-time "2 sec" nil
                         (lambda ()
                           ;; Ensure lsp-mode is loaded before calling our function
                           (require 'lsp-mode)
                           (my/prewarm-ruby-lsp-on-startup)))))
{{- end }}
(use-package lsp-treemacs :ensure t
  :defer t
  :after lsp-mode
  :custom
  (lsp-treemacs-theme "nerd-icons"))

(use-package lsp-ui :ensure t
  :defer t
  :after lsp-mode)

(use-package helm-lsp :ensure t
  :defer t
  :after (helm lsp-mode))

;; DAP debugging - only loads when needed
(use-package dap-mode :ensure t
  :defer t
  :hook
  ((lsp-mode . dap-mode)
   (lsp-mode . dap-ui-mode)))

;; Better projectile integration for Rails - only in Rails projects
(use-package projectile-rails :ensure t
  :defer t
  :after projectile
  :hook (projectile-mode . projectile-rails-on))
