;; -*- lexical-binding: t; -*-

(use-package emacs :ensure nil
  :init
  ;; Add treesitter grammars so Emacs knows where to find them
  (setopt treesit-language-source-alist '((bash "https://github.com/tree-sitter/tree-sitter-bash" "v0.23.3")
                                         (cmake "https://github.com/uyha/tree-sitter-cmake" "v0.5.0")
                                         (css "https://github.com/tree-sitter/tree-sitter-css" "v0.23.2")
                                         (elixir "https://github.com/elixir-lang/tree-sitter-elixir" "v0.3.4")
                                         (elisp "https://github.com/Wilfred/tree-sitter-elisp" "main")
                                         (go "https://github.com/tree-sitter/tree-sitter-go" "v0.23.4")
                                         (gomod "https://github.com/camdencheek/tree-sitter-go-mod" "v1.1.0")
                                         (gosum "https://github.com/tree-sitter-grammars/tree-sitter-go-sum" "v1.0.0")
                                         (gdscript "https://github.com/PrestonKnopp/tree-sitter-gdscript" "v2.0.0")
                                         (ruby "https://github.com/tree-sitter/tree-sitter-ruby" "v0.23.1")
                                         (sql "https://github.com/DerekStride/tree-sitter-sql" "gh-pages")
                                         (html "https://github.com/tree-sitter/tree-sitter-html" "v0.23.2")
                                         (jsx "https://github.com/tree-sitter/tree-sitter-javascript" "v0.23.1" "src")
                                         (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "v0.23.1" "src")
                                         (json "https://github.com/tree-sitter/tree-sitter-json" "v0.24.8")
                                         (make "https://github.com/alemuller/tree-sitter-make" "main")
                                         (markdown "https://github.com/ikatyang/tree-sitter-markdown" "v0.7.1")
                                         (python "https://github.com/tree-sitter/tree-sitter-python" "v0.23.6")
                                         (rust "https://github.com/tree-sitter/tree-sitter-rust" "v0.24.0")
                                         (toml "https://github.com/tree-sitter/tree-sitter-toml" "v0.5.1")
                                         (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "v0.23.2" "tsx/src")
                                         (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "v0.23.2" "typescript/src")
                                         (yaml "https://github.com/ikatyang/tree-sitter-yaml" "v0.5.0")
                                         (hcl "https://github.com/tree-sitter-grammars/tree-sitter-hcl" "v1.1.0")
                                         (gotmpl "https://github.com/ngalaiko/tree-sitter-go-template" "master")))
  ;; Map built-in modes to their tree-sitter equivalents
  (setq major-mode-remap-alist
        '((ruby-mode . ruby-ts-mode)
          (python-mode . python-ts-mode)
          (js-mode . javascript-ts-mode)
          (css-mode . css-ts-mode)
          (html-mode . html-ts-mode)
          (json-mode . json-ts-mode)
          (sh-mode . bash-ts-mode))))

(use-package ruby-ts-mode
  :ensure nil
  :defer t
  :delight)

(use-package emacs-lisp-mode
  :ensure nil
  :delight
  :mode ("\\.el\\'" . emacs-lisp-mode))

(use-package bash-ts-mode
  :ensure nil
  :defer t
  :delight)
(use-package sh-mode
  :ensure nil
  :delight
  :mode ("\\.fish\\(rc\\)?\\'" . sh-mode))

(use-package json-ts-mode
  :ensure nil
  :defer t
  :delight)
(use-package yaml-ts-mode
  :ensure nil
  :delight
  :mode ("\\.\\(ya?ml\\)\\(?:-cpp\\)?\\'" . yaml-ts-mode))
(use-package toml-ts-mode
  :ensure nil
  :delight
  :mode ("\\.toml\\'" . toml-ts-mode))

(use-package sql-ts-mode
  :ensure nil
  :delight
  :mode ("\\.sql\\'" . sql-ts-mode))
(use-package dbml-mode
  :ensure t
  :delight
  :mode ("\\.dbml\\'" . dbml-mode))

(use-package hcl-ts-mode
  :ensure nil
  :delight
  :mode ("\\.hcl[2-4]?\\'" . hcl-ts-mode))

(use-package markdown-ts-mode
  :ensure nil
  :delight
  :mode ("\\.md\\'" . markdown-ts-mode))

(use-package html-ts-mode
  :ensure nil
  :defer t
  :delight)
(use-package css-ts-mode
  :ensure nil
  :defer t
  :delight)
(use-package javascript-ts-mode
  :ensure nil
  :delight
  :mode (("\\.jsx\\'" . js-jsx-mode)))  ; jsx still needs explicit mode

(use-package typescript-ts-mode
  :ensure nil
  :delight
  :mode (("\\.ts\\'" . typescript-ts-mode)
         ("\\.tsx\\'" . tsx-ts-mode)))

(use-package elixir-ts-mode
  :ensure nil
  :delight
  :mode ("\\.\\(ex\\|exs\\|eex\\|leex\\|heex\\)\\'" . elixir-ts-mode))
(use-package python-ts-mode
  :ensure nil
  :defer t
  :delight)
(use-package rust-ts-mode
  :ensure nil
  :delight
  :mode ("\\.rs\\'" . rust-ts-mode))
(use-package go-ts-mode
  :ensure nil
  :delight
  :mode ("\\(\\.go\\|/go\\.mod\\|/go\\.sum\\)\\'" . go-ts-mode))

(use-package gdscript-mode :ensure (:host github :repo "godotengine/emacs-gdscript-mode") :delight :mode ("\\.gd\\'" . gdscript-ts-mode))

;; Linting - only activate in programming modes
(use-package flycheck :ensure t
  :delight
  :hook (prog-mode . flycheck-mode)  ; Lazy load for programming modes only
  :config
  ;; Disable Ruby checkers that overlap with Ruby LSP
  (setq-default flycheck-disabled-checkers '(ruby-rubocop ruby-standard)))

;; Show flycheck errors inline in the buffer
(use-package flycheck-inline :ensure t
  :after flycheck
  :hook (flycheck-mode . flycheck-inline-mode))

;; Navigate flycheck errors with consult
(use-package consult-flycheck :ensure t
  :after (consult flycheck))

;; Automatic code formatting on save
(use-package apheleia :ensure t
  :config
  ;; Hide from modeline by setting lighter to empty
  (setq apheleia-mode-lighter "")
  ;; Enable globally - formats on save without interrupting
  (apheleia-global-mode +1)
  ;; Ensure formatters use mise-managed tools
  ;; Apheleia will automatically find these in PATH via mise
  ;; No additional configuration needed for standard formatters:
  ;; - prettier (JS/TS/HTML/CSS/JSON/YAML)
  ;; - black/ruff (Python)
  ;; - gofmt/goimports (Go)
  ;; - mix format (Elixir)
  ;; - rubocop/standardrb (Ruby)
  ;; - rustfmt (Rust)
  ;; - shfmt (Shell)
  )

;; LSP support
(use-package lsp-mode :ensure t
  :delight
  :defer t  ; Don't load until a supported mode activates
  :custom
  (setopt lsp-keymap-prefix "C-c l")
  (lsp-keep-workspace-alive nil) ;; close LSP servers after last buffer is closed
  (lsp-ruby-lsp-use-bundler nil) ;; use global ruby-lsp with composed bundle
  (lsp-completion-provider :none) ;; Use corfu instead of company-mode
  ;; Monorepo support: disable auto-guessing to get prompts for correct project roots
  (lsp-auto-guess-root nil) ;; Let LSP prompt for project root in monorepos
  :hook
  (ruby-ts-mode . lsp)
  (html-ts-mode . lsp)
  (typescript-ts-mode . lsp)
  (tsx-ts-mode . lsp)
  (javascript-ts-mode . lsp)
  (js-jsx-mode . lsp)
  (go-ts-mode . lsp)
  (elixir-ts-mode . lsp)
  (gdscript-ts-mode . lsp)
  (rust-ts-mode . lsp)
  (lsp-mode . lsp-enable-which-key-integration)
  (lsp-mode . lsp-headerline-breadcrumb-mode)
  :config
  ;; Enable breadcrumb in header line with icons
  (setq lsp-headerline-breadcrumb-enable t)
  (setq lsp-headerline-breadcrumb-icons-enable t)
  
  ;; Suppress company-mode warnings since we're using corfu
  (setq lsp-warn-no-matched-clients nil)

  ;; Monorepo workflow: LSP will prompt you to select the correct project root
  ;; the first time you open a file in each subproject. Your choices are saved
  ;; in ~/.emacs.d/.lsp-session-v1 and remembered across Emacs sessions.
  ;; Commands: M-x lsp-workspace-folders-{add,remove} to manage workspace folders
  
  ;; Configure go.mod files - disable LSP for them as gopls doesn't support them well
  (add-to-list 'lsp-language-id-configuration '(go-mod-mode . "go.mod"))
  (add-hook 'go-mod-ts-mode-hook (lambda () (lsp-mode -1)))
  
  ;; Configure all LSP servers to use mise for consistent environment management
  ;; This ensures they get the correct versions and environment variables from mise
  
  ;; Go LSP (gopls) - uses separate path and args variables
  (with-eval-after-load 'lsp-go
    (setq lsp-go-gopls-server-path "mise")
    (setq lsp-go-gopls-server-args '("exec" "--" "gopls" "-remote=auto")))
  
  ;; TypeScript/JavaScript LSP - uses path and args pattern
  (with-eval-after-load 'lsp-javascript
    (setq lsp-clients-typescript-tls-path "mise")
    (setq lsp-clients-typescript-server-args '("exec" "--" "typescript-language-server" "--stdio")))
  
  ;; Angular language server - let lsp-angular auto-detect with mise
  (setq lsp-clients-angular-node-get-prefix-command 
        "mise exec -- sh -c 'dirname $(dirname $(which node))'")
  (setq lsp-clients-angular-language-server-command nil)
  
  ;; Rust analyzer
  (setq lsp-rust-analyzer-server-command '("mise" "exec" "--" "rust-analyzer"))
  
  ;; Re-register HTML/CSS/JSON servers to use mise exec for consistent environment
  (with-eval-after-load 'lsp-html
    (lsp-register-client
     (make-lsp-client 
      :new-connection (lsp-stdio-connection
                       '("mise" "exec" "--" "vscode-html-language-server" "--stdio"))
      :activation-fn (lsp-activate-on "html")
      :priority -4
      :completion-in-comments? t
      :server-id 'html-ls
      :initialization-options (lambda ()
                                (list :dataPaths lsp-html-custom-data))
      :async-request-handlers (ht ("html/customDataContent" #'lsp-html--get-content))
      :initialized-fn (lambda (w)
                        (with-lsp-workspace w
                          (lsp--set-configuration
                           (lsp-configuration-section "html")))))))
  
  (with-eval-after-load 'lsp-css
    (lsp-register-client
     (make-lsp-client
      :new-connection (lsp-stdio-connection
                       '("mise" "exec" "--" "vscode-css-language-server" "--stdio"))
      :activation-fn (lsp-activate-on "css" "scss" "sass" "less")
      :priority -1
      :action-handlers (lsp-ht ("_css.applyCodeAction" #'lsp-css--apply-code-action))
      :server-id 'css-ls)))
  
  (with-eval-after-load 'lsp-json
    (lsp-register-client
     (make-lsp-client
      :new-connection (lsp-stdio-connection
                       '("mise" "exec" "--" "vscode-json-language-server" "--stdio"))
      :activation-fn (lsp-activate-on "json" "jsonc")
      :server-id 'json-ls
      :priority 0
      :multi-root t
      :completion-in-comments? t
      :initialization-options lsp-json--extra-init-params
      :async-request-handlers (ht ("vscode/content" #'lsp-json--get-content))
      :initialized-fn (lambda (w)
                        (with-lsp-workspace w
                          (lsp--set-configuration
                           (ht-merge (lsp-configuration-section "json")
                                     (lsp-configuration-section "http")))
                          (lsp-notify "json/schemaAssociations" lsp-json--schema-associations))))))
  
  ;; Disable TypeProf and default ruby-lsp to avoid conflicts
  (add-to-list 'lsp-disabled-clients 'typeprof-ls)
  (add-to-list 'lsp-disabled-clients 'ruby-lsp-ls)
  ;; Register custom ruby-lsp client with launcher for dependency handling
  (lsp-register-client
   (make-lsp-client
    :new-connection (lsp-stdio-connection 
                     (lambda () 
                       ;; Find the actual Rails root directory for monorepos
                       (let* ((file-dir (if buffer-file-name 
                                          (file-name-directory buffer-file-name)
                                        default-directory))
                              (rails-root (or (locate-dominating-file file-dir "Gemfile")
                                            (locate-dominating-file file-dir "config/application.rb")
                                            file-dir)))
                         (let ((default-directory rails-root))
                           (list (my-mise-which "ruby-lsp") "--use-launcher")))))
    :activation-fn (lsp-activate-on "ruby")
    :priority 10
    :server-id 'ruby-lsp-mise))
  
  
  (defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
    "Prepend emacs-lsp-booster command to lsp CMD, with mise support."
    (let ((orig-result (funcall old-fn cmd test?)))
      (if (and (not test?)                             ;; for check lsp-server-present?
               (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
               lsp-use-plists
               (not (functionp 'json-rpc-connection))  ;; native json-rpc
               (executable-find "emacs-lsp-booster"))
          (progn
            ;; If command starts with mise exec, we need to insert lsp-booster after mise exec
            (if (and (listp orig-result)
                     (>= (length orig-result) 3)
                     (string= (car orig-result) "mise")
                     (string= (cadr orig-result) "exec"))
                ;; mise exec -- <cmd> becomes mise exec -- emacs-lsp-booster -- <cmd>
                (append '("mise" "exec" "--" "emacs-lsp-booster" "--disable-bytecode" "--")
                        (nthcdr 3 orig-result))
              ;; Regular command: prepend emacs-lsp-booster
              (progn
                (when-let* ((command-from-exec-path (executable-find (car orig-result))))  ;; resolve command from exec-path (in case not found in $PATH)
                  (setcar orig-result command-from-exec-path))
                (message "Using emacs-lsp-booster for %s!" orig-result)
                (append '("emacs-lsp-booster" "--disable-bytecode" "--") orig-result))))
        orig-result)))
  (advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command))

{{- if .prewarmRubyLSP }}
;; Prewarm Ruby LSP server configuration
(with-eval-after-load 'lsp-mode
  (defun my/prewarm-ruby-lsp-on-startup ()
    "Start Ruby LSP server in the background without opening a visible buffer.
This is intended to be run on startup to avoid delays when opening the first Ruby file."
    (when (and (executable-find "ruby-lsp")
               (not (seq-find (lambda (ws)
                                (string-match-p "ruby-lsp" (lsp--workspace-print ws)))
                              (lsp-workspaces))))
      ;; Create a dedicated directory for prewarming to avoid /tmp project detection
      (let* ((prewarm-dir (expand-file-name "lsp-prewarm" user-emacs-directory))
             (_ (make-directory prewarm-dir t))
             (temp-file (expand-file-name "ruby-prewarm.rb" prewarm-dir))
             (buf (find-file-noselect temp-file t)))
        ;; Add to LSP session blocklist to prevent "import project" prompts
        (when (boundp 'lsp-session-folders-blocklist)
          (add-to-list 'lsp-session-folders-blocklist prewarm-dir))
        (with-current-buffer buf
          (ruby-ts-mode)
          (condition-case err
              (progn
                ;; Start LSP with minimal features
                (let ((lsp-auto-guess-root t)
                      (lsp-enable-file-watchers nil))
                  (lsp))
                (message "Ruby LSP server prewarmed successfully"))
            (error (message "Failed to prewarm Ruby LSP: %s" err)))
          ;; Clean up buffer immediately, but keep server running
          (kill-buffer buf))
        ;; Clean up file after a delay
        (run-at-time "5 sec" nil
                     (lambda ()
                       (ignore-errors
                         (delete-file temp-file))))))))

;; Add elpaca-after-init-hook to run prewarming after all packages are loaded
(add-hook 'elpaca-after-init-hook
          (lambda ()
            (run-at-time "2 sec" nil
                         (lambda ()
                           ;; Ensure lsp-mode is loaded before calling our function
                           (require 'lsp-mode)
                           (my/prewarm-ruby-lsp-on-startup)))))
{{- end }}
(use-package lsp-treemacs :ensure t
  :defer t
  :after lsp-mode
  :custom
  (lsp-treemacs-theme "nerd-icons"))

(use-package lsp-ui :ensure t
  :defer t
  :after lsp-mode
  :custom
  ;; Configure doc to use glance style (floating at point) instead of drawer
  (lsp-ui-doc-enable t)                 ; Enable documentation
  (lsp-ui-doc-position 'at-point)       ; Show at point instead of top/bottom
  (lsp-ui-doc-show-with-cursor t)       ; Show on cursor hover
  (lsp-ui-doc-show-with-mouse t)        ; Show on mouse hover
  (lsp-ui-doc-delay 0.5)                ; Small delay before showing
  
  ;; Make the doc popup look better
  (lsp-ui-doc-use-childframe t)         ; Use child frame for better positioning
  (lsp-ui-doc-max-width 80)             ; Maximum width
  (lsp-ui-doc-max-height 20)            ; Maximum height
  
  ;; Peek configuration
  (lsp-ui-peek-enable t)                ; Enable peek feature
  (lsp-ui-peek-show-directory t))

;; Corfu for in-buffer completion (works great with LSP)
(use-package corfu :ensure t
  :custom
  (corfu-cycle t)                    ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                     ;; Enable auto completion
  (corfu-auto-delay 0.3)             ;; Delay before auto completion
  (corfu-auto-prefix 2)              ;; Minimum prefix length for auto completion
  (corfu-separator ?\s)              ;; Orderless field separator
  (corfu-quit-at-boundary 'separator) ;; Quit at completion boundary
  (corfu-quit-no-match 'separator)   ;; Quit when no match with separator
  (corfu-preview-current 'insert)    ;; Preview current candidate on insert
  (corfu-preselect 'prompt)          ;; Preselect the prompt
  (corfu-on-exact-match nil)         ;; Don't auto-select exact matches
  (corfu-scroll-margin 5)            ;; Use scroll margin
  :init
  (global-corfu-mode)
  
  ;; Enable Corfu in minibuffer for eval-expression etc.
  (defun corfu-enable-in-minibuffer ()
    "Enable Corfu in the minibuffer if `completion-at-point' is bound."
    (when (where-is-internal #'completion-at-point (list (current-local-map)))
      (setq-local corfu-auto nil)  ; Disable auto completion
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer))

;; Add extensions
(use-package corfu-popupinfo :ensure nil
  :after corfu
  :hook (corfu-mode . corfu-popupinfo-mode)
  :custom
  (corfu-popupinfo-delay '(0.25 . 0.1))
  (corfu-popupinfo-hide nil)
  :config
  (corfu-popupinfo-mode))

;; Corfu terminal support
(use-package corfu-terminal :ensure t
  :if (not (display-graphic-p))
  :config
  (corfu-terminal-mode +1))

;; Icons in completion
(use-package kind-icon :ensure t
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; Use corfu face as background
  (kind-icon-use-icons t)
  (kind-icon-blend-background t)
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

;; Cape completion extensions
(use-package cape :ensure t
  :init
  ;; Add to the global default value of `completion-at-point-functions' which is
  ;; used by `completion-at-point'.  The order of the functions matters, the
  ;; first function returning a result wins.  Note that the list of buffer-local
  ;; completion functions takes precedence over the global list.
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  ;; cape-keyword for programming modes
  (add-hook 'prog-mode-hook
            (lambda ()
              (add-to-list 'completion-at-point-functions #'cape-keyword t))))

;; DAP debugging - only loads when needed
(use-package dap-mode :ensure t
  :defer t
  :hook
  ((lsp-mode . dap-mode)
   (lsp-mode . dap-ui-mode)))

;; Better projectile integration for Rails - only in Rails projects
(use-package projectile-rails :ensure t
  :defer t
  :after projectile
  :hook (projectile-mode . projectile-rails-on))

;; Load chezmoi template support (composite grammars for .tmpl files)
(load-file (expand-file-name "chezmoi-templates.el" user-emacs-directory))
