# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: yq
description: A portable command-line data file processor
commands:
  - name: eval
    description: (default) Apply the expression to each document in each yaml file in sequence
  - name: eval-all
    description: Loads all yaml documents of all yaml files and runs expression once
  - name: completion
    description: Generate the autocompletion script for the specified shell
flags:
  -C, --colors: Force print with colors
  --csv-auto-parse: Parse CSV YAML/JSON values
  --csv-separator=: CSV Separator character
  -e, --exit-status: Set exit status if there are no matches or null or false is returned
  --expression=: Forcibly set the expression argument
  --from-file=: Load expression from specified file
  -f, --front-matter=: (extract|process) first input as yaml front-matter
  --header-preprocess: Slurp any header comments and separators before processing expression
  -h, --help: Help for yq
  -I, --indent=: Sets indent level for output
  -i, --inplace: Update the file in place of first file given
  -p, --input-format=: Parse format for input
  --lua-globals: Output keys as top-level global variables
  --lua-prefix=: Prefix for lua output
  --lua-suffix=: Suffix for lua output
  --lua-unquoted: Output unquoted string keys
  -M, --no-colors: Force print with no colors
  -N, --no-doc: Don't print document separators (---)
  -0, --nul-output: Use NUL char to separate values
  -n, --null-input: Don't read input, simply evaluate the expression given
  -o, --output-format=: Output format type
  -P, --prettyPrint: Pretty print, shorthand for '... style = ""'
  --properties-array-brackets: Use [x] in array paths (e.g. for SpringBoot)
  --properties-separator=: Separator to use between keys and values
  -s, --split-exp=: Print each result into a file named (exp)
  --split-exp-file=: Use a file to specify the split-exp expression
  --string-interpolation: Toggles strings interpolation of \(exp)
  --tsv-auto-parse: Parse TSV YAML/JSON values
  -r, --unwrapScalar: Unwrap scalar, print the value with no quotes, colors or comments
  -v, --verbose: Verbose mode
  -V, --version: Print version information and quit
  --xml-attribute-prefix=: Prefix for xml attributes
  --xml-content-name=: Name for xml content
  --xml-directive-name=: Name for xml directives
  --xml-keep-namespace: Enables keeping namespace after parsing attributes
  --xml-proc-inst-prefix=: Prefix for xml processing instructions
  --xml-raw-token: Enables using RawToken method instead Token
  --xml-skip-directives: Skip over directives
  --xml-skip-proc-inst: Skip over process instructions
  --xml-strict-mode: Enables strict parsing of XML
completion:
  flag:
    input-format: ["auto", "a", "yaml", "y", "json", "j", "props", "p", "csv", "c", "tsv", "t", "xml", "x", "base64", "uri", "toml", "lua", "l", "ini", "i"]
    output-format: ["auto", "a", "yaml", "y", "json", "j", "props", "p", "csv", "c", "tsv", "t", "xml", "x", "base64", "uri", "toml", "shell", "s", "lua", "l", "ini", "i"]
    front-matter: ["extract", "process"]