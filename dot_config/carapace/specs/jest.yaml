# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: jest
description: Delightful JavaScript Testing
flags:
  -h, --help: Show help
  --version: Show version number
  --all: Force Jest to run all tests instead of running only tests related to changed files
  --automock: Automock all files by default
  -b, --bail?: Exit the test suite immediately after n number of failing tests
  --cache: Whether to use the transform cache
  --no-cache: Disable the cache
  --cacheDirectory=: The directory where Jest should store its cached dependency information
  --changedFilesWithAncestor: Runs tests related to the current changes and the changes made in the last commit
  --changedSince=: Runs tests related to the changes since the provided branch
  --ci: Run Jest in continuous integration (CI) mode
  --clearCache: Clears the configured Jest cache directory and then exits
  --clearMocks: Automatically clear mock calls before every test
  --collectCoverage: Alias for --coverage
  --collectCoverageFrom=: A glob pattern matching the files that coverage info needs to be collected from
  --color: Forces test results output color highlighting
  --no-color: Disable colors
  --colors: Alias for --color
  -c, --config=: The path to a jest config file
  --coverage: Indicates that test coverage information should be collected
  --coverageDirectory=: The directory where Jest should output its coverage files
  --coveragePathIgnorePatterns=: An array of regexp pattern strings
  --coverageProvider=: Select between Babel and V8 to collect coverage
  --coverageReporters=: A list of reporter names that Jest uses when writing coverage reports
  --coverageThreshold=: A JSON string with which will be used to configure minimum threshold enforcement
  --debug: Print debugging info about your jest config
  --detectLeaks: Detect memory leaks in tests
  --detectOpenHandles: Print out remaining open handles preventing Jest from exiting
  -e, --env=: The test environment used for all tests
  --errorOnDeprecated: Make calling deprecated APIs throw helpful error messages
  --expand: Use this flag to show full diffs instead of a patch
  --filter=: Path to a module exporting a filtering function
  --findRelatedTests: Find related tests for a list of source files
  --forceExit: Force Jest to exit after all tests have completed running
  --globalSetup=: The path to a module that runs before All Tests
  --globalTeardown=: The path to a module that runs after All Tests
  --globals=: A JSON string with map of global variables
  --haste=: A JSON string with map of variables for the haste module system
  -i, --init: Generate a basic configuration file
  --ignoreProjects=: Ignore the tests of the specified projects
  --injectGlobals: Inject Jest's globals into the global environment
  --no-injectGlobals: Prevent injection of Jest's globals
  --json: Prints the test results in JSON
  --lastCommit: Run all tests affected by file changes in the last commit
  --listTests: Lists all tests Jest will run given the arguments
  --logHeapUsage: Logs the heap usage after every test
  --maxConcurrency=: Specifies the maximum number of tests that are allowed to run concurrently
  -w, --maxWorkers=: Specifies the maximum number of workers the worker-pool will spawn
  --moduleDirectories=: An array of directory names to be searched recursively up
  --moduleFileExtensions=: An array of file extensions your modules use
  --moduleNameMapper=: A JSON string with a map from regular expressions to module names
  --modulePathIgnorePatterns=: An array of regexp pattern strings
  --modulePaths=: An array of absolute paths to additional locations to search
  --noStackTrace: Disables stack trace in test results output
  --notify: Activates notifications for test results
  --no-notify: Disables notifications
  --notifyMode=: Specifies when notifications will appear
  -o, --onlyChanged: Attempts to identify which tests to run based on which files have changed
  --onlyFailures: Run tests that failed in the previous execution
  --openHandlesTimeout=: Print a warning if an operation takes longer than the specified value
  --outputFile=: Write test results to a file when --json is also specified
  -p, --passWithNoTests: Allows the test suite to pass when no tests exist
  --preset=: A preset that is used as a base for Jest's configuration
  --prettierPath=: The path to the prettier node module used for inline snapshots
  --projects=: A list of projects that use Jest to run all tests
  --randomize: Randomize the order of the tests within a file
  --reporters=: A list of custom reporters for the test suite
  --resetMocks: Automatically reset mock state before every test
  --resetModules: If enabled, the module registry for every test file will be reset
  --resolver=: A JSON string which allows the use of a custom resolver
  --restoreMocks: Automatically restore mock state and implementation before every test
  --rootDir=: The root directory that Jest should scan for tests and modules within
  -r, --roots=: A list of paths to directories that Jest should use to search for files in
  --runInBand: Run all tests serially in the current process
  --runTestsByPath: Used when provided patterns are exact file paths
  --seed=: Sets a seed value that can be retrieved in a test file
  --selectProjects=: Run the tests of the specified projects
  --setupFiles=: A list of paths to modules that run code to setup the testing environment
  --setupFilesAfterEnv=: A list of paths to modules that run code to setup the testing framework
  --shard=: Shard tests and execute only the selected shard
  --showConfig: Print your jest config and then exits
  --showSeed: Prints the seed value in the test report summary
  --silent: Prevent tests from printing messages through the console
  --skipFilter: Disables the filter provided by --filter
  --snapshotSerializers=: A list of paths to snapshot serializer modules
  --testEnvironment=: Alias for --env
  --testEnvironmentOptions=: A JSON string with options for the testEnvironment
  --testFailureExitCode=: Exit code of jest command if the test run failed
  --testLocationInResults: Add location information to the test results
  --testMatch=: The glob patterns Jest uses to detect test files
  -t, --testNamePattern=: Run only tests with a name that matches the regex pattern
  --testPathIgnorePatterns=: An array of regexp pattern strings
  --testPathPattern=: A regexp pattern string that is matched against all tests paths
  --testRegex=: A string or array of string regexp patterns
  --testResultsProcessor=: Allows the use of a custom results processor
  --testRunner=: Allows to specify a custom test runner
  --testSequencer=: Allows to specify a custom test sequencer
  --testTimeout=: Default timeout of a test in milliseconds
  --testURL=: This option sets the URL for the jsdom environment
  -u, --updateSnapshot: Use this flag to re-record snapshots
  --useStderr: Divert all output to stderr
  --verbose: Display individual test results with the test suite hierarchy
  --watch: Watch files for changes and rerun tests related to changed files
  --watchAll: Watch files for changes and rerun all tests
  --no-watchman: Disable watchman
  --watchPathIgnorePatterns=: An array of regexp pattern strings
  --watchPlugins=: An array of strings with paths to additional plugins
  --workerIdleMemoryLimit=: Amount of memory a worker can use before it's recycled
  --workerThreads: Experimental: Enable worker threads for parallelization
completion:
  flag:
    coverageProvider: ["babel", "v8"]
    testEnvironment: ["node", "jsdom"]
    notifyMode: ["always", "failure", "success", "change", "failure-change"]