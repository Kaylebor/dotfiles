[tools]
ruby = "3" # Ruby interpreter for general scripting
node = "latest" # Node.js runtime and tooling
go = "latest" # Go toolchain for compiling Go code
python = "latest" # CPython runtime for Python projects
java = "graalvm-community-23" # GraalVM Java distribution with polyglot support
elixir = "latest" # Elixir language running on the BEAM VM
erlang = "latest" # Erlang/OTP runtime for BEAM ecosystems
fzf = "latest" # Terminal fuzzy finder for interactive search
ffmpeg = "latest" # The biggest, most complete video tool
lua = "latest" # Lua scripting language runtime
lua-language-server = "latest" # LSP server providing Lua IDE features
rust = { version = "stable", components = "rust-analyzer" } # Rust toolchain with rust-analyzer component
deno = "latest" # Deno runtime for TypeScript/JavaScript
bun = "latest" # Bun JavaScript runtime and toolkit
pipx = "latest" # pipx installer for isolated Python CLIs
uv = "latest" # uv fast Python package and project manager

# CLI Tools
age = "latest" # age encryption tool for simple key-based file security
bat = "latest" # cat alternative with syntax highlighting and git integration
biome = "latest" # Biome formatter and linter for JS/TS projects
carapace = "latest" # Multi-shell completion generator for CLIs
claude = "latest" # Anthropic Claude command-line assistant
codex = "latest" # OpenAI Codex local coding agent CLI
ctop = "latest" # Top-like monitor for container metrics
curlie = "latest" # HTTPie-style frontend built on curl
difftastic = "latest" # Syntax-aware structural diff tool
eza = "latest" # Modern ls replacement with git and icons
fd = "latest" # Fast, user-friendly alternative to find
gh = "latest" # GitHub command-line interface
gitu = "latest" # Magit-inspired Git TUI client
golangci-lint = "latest" # Aggregated Go linters runner
gron = "latest" # Flatten JSON into grep-friendly output
hyperfine = "latest" # Benchmarking tool for shell commands
jc = "latest" # Convert CLI output into structured JSON
lefthook = "latest" # Fast Git hooks manager
lnav = "latest" # Log file navigator and viewer
prettier = "latest" # Opinionated formatter for web languages
rg = "latest" # Ripgrep search utility for source trees
ripgrep-all = "latest" # Ripgrep variant that searches PDFs, ebooks, and archives
shellcheck = "latest" # Static analyzer for shell scripts
staticcheck = "latest" # Advanced static analysis for Go code
stylua = "latest" # Lua code formatter
television = "latest" # Extensible fuzzy finder TUI inspired by Telescope
usage = "latest" # CLI specification and autocompletion toolkit
yq = "latest" # YAML processor with jq-style syntax
zellij = "latest" # Rust terminal multiplexer and workspace manager
zoxide = "latest" # Smarter cd command with frecency-based navigation

# Extra tools not present in mise registry or overriden
"cargo:xan" = "latest" # xan CSV toolkit and visualization CLI
"cargo:mdopen" = "latest" # mdopen utility to view Markdown in the browser
"cargo:emacs-lsp-booster" = "latest" # Native helper to accelerate Emacs LSP
"go:github.com/chrishrb/go-grip" = "latest" # Go Grip server for GitHub-style Markdown previews
"go:github.com/cweill/gotests/gotests" = "latest" # Generate table-driven tests for Go code
"go:github.com/fatih/gomodifytags" = "latest" # Modify struct tags in Go source
"go:github.com/jessfraz/dockfmt" = "latest" # Format Dockerfiles consistently
"go:github.com/stamblerre/gocode" = "latest" # Autocompletion daemon for Go tooling
"go:github.com/x-motemen/gore/cmd/gore" = "latest" # Interactive Go REPL
"go:golang.org/x/tools/cmd/goimports" = "latest" # gofmt variant that manages imports
"go:golang.org/x/tools/gopls" = "latest" # Official Go language server
"go:mvdan.cc/sh/v3/cmd/shfmt" = "latest" # Formatter for shell scripts
"go:github.com/sqls-server/sqls" = "latest" # SQL language server for editors
"go:github.com/charmbracelet/crush" = "latest" # Charmbracelet's Agent CLI
"npm:@mermaid-js/mermaid-cli" = "latest" # Render Mermaid diagrams from the CLI
"npm:@github/copilot-language-server" = "latest" # GitHub Copilot LSP backend
"npm:clipboard-cli" = "latest" # Copy text to the system clipboard from the CLI
"npm:@google/gemini-cli" = "latest" # Google's Agentic CLI tool
"npm:nx" = "latest" # Nx monorepo build and task runner
"npm:opencode-ai" = "latest" # Fully open OpenAI Codex fork
"npm:typescript-language-server" = "latest" # Language Server Protocol support for TypeScript
"npm:vscode-langservers-extracted" = "latest" # VS Code HTML/CSS/JSON language servers
"pipx:aider-chat" = { version = "latest", uvx_args = "--force --python python3.12" } # Aider AI pair-programming assistant

[settings]
experimental = true
idiomatic_version_file_enable_tools = ["ruby"]

[settings.npm]
bun = true

[env]
MISE_NODE_COREPACK=true
{{- if and (eq .chezmoi.os "linux") (eq .chezmoi.osRelease.idLike "arch") }}
KERL_CONFIGURE_OPTIONS="--with-odbc=/var/lib/pacman/local/unixodbc-{{ output "pacman" "-Q" "unixodbc" | trim | splitList " " | last }}"
{{- end }}
{{- if (eq .chezmoi.os "darwin") }}
{{- $brewPrefix := "" }}
{{- if and (hasKey . "homebrewInstallType") (eq .homebrewInstallType "alternative") }}
{{-   if and (hasKey . "homebrewPaths") (stat .homebrewPaths.base) }}
{{-     $brewPrefix = .homebrewPaths.base }}
{{-   end }}
{{- else }}
{{-   if stat "/opt/homebrew" }}
{{-     $brewPrefix = "/opt/homebrew" }}
{{-   else if stat "/usr/local/Homebrew" }}
{{-     $brewPrefix = "/usr/local" }}
{{-   end }}
{{- end }}
{{- if $brewPrefix }}
LDFLAGS="{{ "{{get_env(name='LDFLAGS', default='')}}" }} -L{{ joinPath $brewPrefix "opt" "llvm" "lib" }} -L{{ joinPath $brewPrefix "opt" "libpq" "lib" }}"
PKG_CONFIG_PATH="{{ "{{get_env(name='PKG_CONFIG_PATH', default='')}}" }}:{{ joinPath $brewPrefix "opt" "libpq" "lib" "pkgconfig" }}:{{ joinPath $brewPrefix "opt" "imagemagick@6" "lib" "pkgconfig" }}"
{{- end }}
## tell compiler not to error out for implicit function declarations
CFLAGS="-Wno-error=implicit-function-declaration"
## Ruby-specific environment variables for alternative Homebrew
CC="/usr/bin/clang"
CXX="/usr/bin/clang++"
CPLUS_INCLUDE_PATH="/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1"
C_INCLUDE_PATH="/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include"
USE_IMAGEMAGICK_6="1"
{{- end }}
