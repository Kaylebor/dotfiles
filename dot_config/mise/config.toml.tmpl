[tools]
ruby = "3"
node = "latest"
go = "latest"
python = "latest"
java = "graalvm-community-23"
elixir = "latest"
erlang = "latest"
lua = "latest"
lua-language-server = "latest"
rust = { version = "stable", components = "rust-analyzer" }
deno = "latest"
bun = "latest"
pipx = "latest"
uv = "latest"
zellij = "latest"

# CLI Tools (migrated from package managers)
"aqua:sharkdp/bat" = "latest"
"cargo:fd-find" = "latest"
"cargo:ripgrep" = "latest"
"cargo:eza" = "latest"
"cargo:gitu" = "latest"
"cargo:usage-cli" = "latest"
"go:github.com/mikefarah/yq/v4" = "latest"
"pipx:jc" = "latest"
"aqua:cli/cli" = "latest"          # gh/github-cli
"aqua:koalaman/shellcheck" = "latest"
"aqua:golangci/golangci-lint" = "latest"
"aqua:carapace-sh/carapace-bin" = "latest"
"aqua:alexpasmantier/television" = "latest"

# Additional CLI Tools (avoiding asdf backends)
"npm:@biomejs/biome" = "latest"        # biome - JS/TS formatter/linter
"npm:prettier" = "latest"              # prettier - code formatter
"aqua:Wilfred/difftastic" = "latest"   # difft - structural diff
"aqua:tomnomnom/gron" = "latest"       # gron - JSON grep
"aqua:rs/curlie" = "latest"            # curlie - better curl
"aqua:FiloSottile/age" = "latest"      # age - encryption tool
"aqua:sigstore/cosign" = "latest"      # cosign - supply chain security verification
"cargo:mdopen" = "latest"
"cargo:emacs-lsp-booster" = "latest"
"cargo:stylua" = "latest"
"go:github.com/chrishrb/go-grip" = "latest"
"go:github.com/cweill/gotests/gotests" = "latest"
"go:github.com/evilmartians/lefthook" = "latest"
"go:github.com/fatih/gomodifytags" = "latest"
"go:github.com/jessfraz/dockfmt" = "latest"
"go:github.com/stamblerre/gocode" = "latest"
"go:github.com/x-motemen/gore/cmd/gore" = "latest"
"go:golang.org/x/tools/cmd/goimports" = "latest"
"go:golang.org/x/tools/gopls" = "latest"
"go:honnef.co/go/tools/cmd/staticcheck" = "latest"
"go:mvdan.cc/sh/v3/cmd/shfmt" = "latest"
"go:github.com/sqls-server/sqls" = "latest"
"npm:@anthropic-ai/claude-code" = "latest"
"npm:@mermaid-js/mermaid-cli" = "latest"
"npm:@musistudio/claude-code-router" = "latest"
"npm:@google/gemini-cli" = "latest"
"npm:@github/copilot-language-server" = "latest"
"npm:@openai/codex" = "latest"
"npm:@qwen-code/qwen-code" = "latest"
"npm:clipboard-cli" = "latest"
"npm:nx" = "latest"
"npm:typescript-language-server" = "latest"
"npm:vscode-langservers-extracted" = "latest"
"pipx:aider-chat" = { version = "latest", uvx_args = "--force --python python3.12" }
"pipx:ramalama" = "latest"

[settings]
experimental = true
idiomatic_version_file_enable_tools = ["ruby"]

[env]
MISE_NODE_COREPACK=true
{{- if and (eq .chezmoi.os "linux") (eq .chezmoi.osRelease.idLike "arch") }}
KERL_CONFIGURE_OPTIONS="--with-odbc=/var/lib/pacman/local/unixodbc-{{ output "pacman" "-Q" "unixodbc" | trim | splitList " " | last }}"
{{- end }}
{{- if (eq .chezmoi.os "darwin") }}
{{- $brewPrefix := "" }}
{{- if and (hasKey . "homebrewInstallType") (eq .homebrewInstallType "alternative") }}
{{-   if and (hasKey . "homebrewPaths") (stat .homebrewPaths.base) }}
{{-     $brewPrefix = .homebrewPaths.base }}
{{-   end }}
{{- else }}
{{-   if stat "/opt/homebrew" }}
{{-     $brewPrefix = "/opt/homebrew" }}
{{-   else if stat "/usr/local/Homebrew" }}
{{-     $brewPrefix = "/usr/local" }}
{{-   end }}
{{- end }}
{{- if $brewPrefix }}
LDFLAGS="{{ "{{get_env(name='LDFLAGS', default='')}}" }} -L{{ joinPath $brewPrefix "opt" "llvm" "lib" }} -L{{ joinPath $brewPrefix "opt" "libpq" "lib" }}"
PKG_CONFIG_PATH="{{ "{{get_env(name='PKG_CONFIG_PATH', default='')}}" }}:{{ joinPath $brewPrefix "opt" "libpq" "lib" "pkgconfig" }}:{{ joinPath $brewPrefix "opt" "imagemagick@6" "lib" "pkgconfig" }}"
{{- end }}
## tell compiler not to error out for implicit function declarations
CFLAGS="-Wno-error=implicit-function-declaration"
## Ruby-specific environment variables for alternative Homebrew
CC="/usr/bin/clang"
CXX="/usr/bin/clang++"
CPLUS_INCLUDE_PATH="/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1"
C_INCLUDE_PATH="/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include"
USE_IMAGEMAGICK_6="1"
{{- end }}
