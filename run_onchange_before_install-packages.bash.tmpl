#!/bin/bash
{{/* Script to check OS and install packages based on OS */}}
# hash: {{ include ".chezmoidata/packages.yml" | sha256sum }}

{{/* Track versions of packages that should trigger re-runs when updated (alternative Homebrew only) */}}
{{- if and (eq .chezmoi.os "darwin") (eq .homebrewInstallType "alternative") }}
{{- range .packages.darwin.brews }}
{{- if and (kindIs "map" .) (hasKey . "watch_versions") (eq .watch_versions true) }}
# {{ .name }}_version: $(brew list --versions {{ .name }} 2>/dev/null || echo "not_installed")
{{- end }}
{{- end }}
{{- end }}

{{/* 
  Environment variables for package reinstallation:
  - CHEZMOI_REINSTALL_PACKAGES: comma-separated list of packages to reinstall using 'brew reinstall'
    Example: CHEZMOI_REINSTALL_PACKAGES="neovim,tmux" chezmoi apply
    Use when: Quick fix for corrupted installations, preserves installation options
  
  - CHEZMOI_FORCE_REINSTALL_PACKAGES: comma-separated list of packages to uninstall then install
    Example: CHEZMOI_FORCE_REINSTALL_PACKAGES="emacs-plus@31" chezmoi apply  
    Use when: Need clean installation, changing installation options, or package requires full removal
*/}}

{{/* MacOS setup commands */}}
{{ if eq .chezmoi.os "darwin" -}}
{{- if not (stat .brewBin) }}
# Install Homebrew
{{- if eq .homebrewInstallType "alternative" }}
# Alternative installation to {{ $.homebrewPath }} (for MDM setups)
echo "Installing Homebrew to {{ $.homebrewPath }} for MDM compatibility..."
mkdir -p "$HOME/{{ $.homebrewPath }}"
curl -L {{ .urls.homebrew.tarball }} | tar xz --strip-components 1 -C "$HOME/{{ $.homebrewPath }}"
eval "$($HOME/{{ $.homebrewPath }}/bin/brew shellenv)"
brew update --force --quiet
chmod -R go-w "$({{ .brewBin }} --prefix)/share/zsh" 2>/dev/null || true
{{- else }}
# Standard installation
/bin/bash -c "$(curl -fsSL {{ .urls.homebrew.install }})"
{{- end }}
{{- end }}
{{- template "brew_eval" . }}

{{/* Check for Homebrew path migrations and packages needing rebuild */}}
{{- template "homebrew-migration-check" . }}

# Apply formula patches for alternative Homebrew
{{- if eq .homebrewInstallType "alternative" }}
echo "Applying formula patches for alternative Homebrew..."

{{- if .formula_patches }}
# Verify formula hashes before patching
{{- range $formula, $config := .formula_patches }}
if ! brew list {{ $formula }} &>/dev/null; then
    echo "Verifying {{ $formula }} formula hash..."
    FORMULA_PATH="$(brew --repository homebrew/core)/Formula/{{ $formula | substr 0 1 }}/{{ $formula }}.rb"
    if [[ -f "$FORMULA_PATH" ]]; then
        ACTUAL_HASH=$(shasum -a 256 "$FORMULA_PATH" | cut -d' ' -f1)
        EXPECTED_HASH="{{ $config.expected_hash }}"
        if [[ "$ACTUAL_HASH" != "$EXPECTED_HASH" ]]; then
            echo "❌ Hash mismatch for {{ $formula }}!"
            echo "   Expected: $EXPECTED_HASH"
            echo "   Actual:   $ACTUAL_HASH"
            echo "   Description: {{ $config.description }}"
            {{- if hasKey $config "issue_url" }}
            echo "   Related issue: {{ $config.issue_url }}"
            {{- end }}
            echo "   The formula may have been updated upstream."
            echo "   Please update the patch and expected hash."
            exit 1
        else
            echo "✅ {{ $formula }} formula hash verified"
            echo "   Patch: {{ $config.description }}"
        fi
    else
        echo "⚠️  Formula not found: $FORMULA_PATH"
    fi
fi
{{- end }}
{{- end }}

{{/* Execute the patch script template */}}
{{- template "patch-homebrew-formulas" . }}

# Set environment variable to force Homebrew to use local formulas instead of API
export HOMEBREW_NO_INSTALL_FROM_API=1
echo "Set HOMEBREW_NO_INSTALL_FROM_API=1 to use local formula modifications"
{{- end }}

# Install Homebrew taps first
{{- if .packages.darwin.taps }}
{{ range .packages.darwin.taps -}}
brew tap {{ . }}
{{ end -}}
{{- end }}

{{/* Ensure uv is available for Python scripts */}}
{{ if eq .chezmoi.os "darwin" -}}
# Install uv on macOS
if ! command -v uv >/dev/null 2>&1; then
  echo "Installing uv for Python scripts..."
  if command -v brew >/dev/null 2>&1; then
    brew install uv
  else
    echo "Error: Homebrew not available, cannot install uv"
    exit 1
  fi
fi
{{ else if eq .chezmoi.os "linux" -}}
{{- if or (eq .chezmoi.osRelease.idLike "arch") (eq .chezmoi.osRelease.id "arch") (eq .chezmoi.osRelease.id "cachyos") }}
# Install uv on Linux (Arch-based)
if ! command -v uv >/dev/null 2>&1; then
  echo "Installing uv for Python scripts..."
  if command -v pacman >/dev/null 2>&1; then
    sudo pacman -S --needed --noconfirm uv
  else
    echo "Error: No package manager found, cannot install uv"
    exit 1
  fi
fi
{{- else }}
echo "Error: Unsupported Linux distribution for uv installation"
exit 1
{{- end }}
{{ end }}

# Initialize SQLite database (idempotent)
echo "Initializing SQLite database..."
"{{ .chezmoi.sourceDir }}/dot_local/bin/executable_chezmoi-sqlite" init

# Handle package reinstalls
# CHEZMOI_REINSTALL_PACKAGES: comma-separated list of packages to reinstall (uses brew reinstall)
# CHEZMOI_FORCE_REINSTALL_PACKAGES: comma-separated list of packages to uninstall then install
if [ -n "$CHEZMOI_REINSTALL_PACKAGES" ]; then
  echo "Reinstalling packages (brew reinstall): $CHEZMOI_REINSTALL_PACKAGES"
  IFS=',' read -ra PACKAGES <<< "$CHEZMOI_REINSTALL_PACKAGES"
  for pkg in "${PACKAGES[@]}"; do
    pkg=$(echo "$pkg" | tr -d ' ')  # Trim whitespace
    if brew list --formula | grep -q "^${pkg}$"; then
      echo "Reinstalling $pkg..."
      brew reinstall "$pkg"
    fi
  done
fi

{{- if and (eq .chezmoi.os "darwin") (eq .homebrewInstallType "alternative") }}
{{- $script_path := printf "%s/dot_local/bin/executable_chezmoi-sqlite" .chezmoi.sourceDir }}
{{- $trigger_id := "" }}
{{- $is_new_id := false }}
{{- if env "CHEZMOI_FORCE_REINSTALL_PACKAGES" }}
{{- /* Env present: generate new ID and store in SQLite */}}
{{- $trigger_id = printf "force_reinstall_%s_%s" (env "CHEZMOI_FORCE_REINSTALL_PACKAGES" | sha256sum | substr 0 8) (now | date "20060102150405") }}
{{- $_ := output $script_path "add" $trigger_id (env "CHEZMOI_FORCE_REINSTALL_PACKAGES") }}
{{- $is_new_id = true }}
{{- else }}
{{- /* Env missing: REUSE existing ID from SQLite (mandatory step!) */}}
{{- $trigger_id = output $script_path "get-latest-force-reinstall" | trim }}
{{- /* If no existing ID in SQLite, generate new one and save it */}}
{{- if not $trigger_id }}
{{- $trigger_id = printf "force_reinstall_none_%s" (now | date "20060102150405") }}
{{- $_ := output $script_path "add" $trigger_id "none" }}
{{- $is_new_id = true }}
{{- end }}
{{- end }}

# Force reinstall trigger management - ID: {{ $trigger_id }}
{{- if env "CHEZMOI_FORCE_REINSTALL_PACKAGES" }}
# Environment variable present: running package installation
echo "Using Python package installer for complex installation logic..."
IFS=',' read -ra PACKAGES <<< "$CHEZMOI_FORCE_REINSTALL_PACKAGES"
"{{ .chezmoi.sourceDir }}/dot_local/bin/executable_chezmoi-package-installer" force-reinstall "${PACKAGES[@]}"
{{- end }}
{{- else }}
{{- if env "CHEZMOI_FORCE_REINSTALL_PACKAGES" }}
# Standard Homebrew or non-Darwin systems - simple installation
echo "Force reinstalling packages (simple uninstall + install): $CHEZMOI_FORCE_REINSTALL_PACKAGES"
IFS=',' read -ra PACKAGES <<< "$CHEZMOI_FORCE_REINSTALL_PACKAGES"
for pkg in "${PACKAGES[@]}"; do
  pkg=$(echo "$pkg" | tr -d ' ')
  if brew list --formula | grep -q "^${pkg}$"; then
    echo "Uninstalling $pkg for clean reinstall..."
    brew uninstall --ignore-dependencies "$pkg"
  fi
  echo "Installing $pkg..."
  brew install "$pkg"
done
{{- end }}
{{- end }}

# Install packages with environment variables and patches first (individual installs)
{{ range .packages.darwin.brews -}}
{{- if kindIs "map" . }}
{{- $hasEnv := false }}
{{- $hasAlternativeEnv := false }}
{{- if hasKey . "env" }}
{{- $hasEnv = true }}
{{- end }}
{{- if hasKey . "alternative_only" }}
{{- if hasKey .alternative_only "env" }}
{{- $hasAlternativeEnv = true }}
{{- end }}
{{- end }}
{{- if or $hasEnv $hasAlternativeEnv }}

# Install {{ .name }}{{- if or $hasEnv $hasAlternativeEnv }} with isolated environment{{- end }}
{{- if or $hasEnv $hasAlternativeEnv }}
({{- if $hasEnv }}{{- range $key, $value := .env }} {{ $key }}={{ $value | quote }}{{- end }}{{- end }}{{- if and $hasAlternativeEnv (eq $.homebrewInstallType "alternative") }}{{- range $key, $value := .alternative_only.env }} {{ $key }}={{ $value | quote }}{{- end }}{{- end }}; brew install {{ .name | quote }}{{- if hasKey . "args" }} {{ range .args }} --{{ . }}{{ end }}{{- end }}{{- if and (hasKey . "alternative_only") (eq $.homebrewInstallType "alternative") }}{{- if hasKey .alternative_only "args" }} {{ range .alternative_only.args }} --{{ . }}{{ end }}{{- end }}{{- end }})
{{- else }}
brew install {{ .name | quote }}{{- if hasKey . "args" }} {{ range .args }} --{{ . }}{{ end }}{{- end }}{{- if and (hasKey . "alternative_only") (eq $.homebrewInstallType "alternative") }}{{- if hasKey .alternative_only "args" }} {{ range .alternative_only.args }} --{{ . }}{{ end }}{{- end }}{{- end }}
{{- end }}

{{- end }}
{{- end }}
{{ end -}}

# Install remaining packages with brew bundle
brew bundle --file=- <<EOF
{{ range .packages.darwin.brews -}}
{{- if kindIs "string" . }}
brew {{ . | quote }}
{{- else if kindIs "map" . }}
{{- $hasEnv := false }}
{{- $hasAlternativeEnv := false }}
{{- if hasKey . "env" }}
{{- $hasEnv = true }}
{{- end }}
{{- if hasKey . "alternative_only" }}
{{- if hasKey .alternative_only "env" }}
{{- $hasAlternativeEnv = true }}
{{- end }}
{{- end }}
{{- if not (or $hasEnv $hasAlternativeEnv) }}
brew {{ .name | quote }}{{- if hasKey . "args" }}, args: [{{ range $i, $arg := .args }}{{if $i}}, {{end}}{{ $arg | quote }}{{ end }}]{{- end }}{{- if and (hasKey . "alternative_only") (eq $.homebrewInstallType "alternative") }}{{- if hasKey .alternative_only "args" }}, args: [{{ range $i, $arg := .alternative_only.args }}{{if $i}}, {{end}}{{ $arg | quote }}{{ end }}]{{- end }}{{- end }}
{{- end }}
{{- end }}
{{ end -}}
{{ range .packages.darwin.casks -}}
{{- if kindIs "string" . }}
cask {{ . | quote }}
{{- else if kindIs "map" . }}
{{- if hasKey . "skip_if_installed" }}
{{- $shouldSkip := false }}
{{- if kindIs "slice" .skip_if_installed }}
{{- range .skip_if_installed }}
{{- if stat . }}
{{- $shouldSkip = true }}
{{- end }}
{{- end }}
{{- else }}
{{- if stat .skip_if_installed }}
{{- $shouldSkip = true }}
{{- end }}
{{- end }}
{{- if not $shouldSkip }}
cask {{ .name | quote }}
{{- end }}
{{- else }}
cask {{ .name | quote }}
{{- end }}
{{- end }}
{{ end -}}
EOF

{{- if eq .homebrewInstallType "alternative" }}
# Update homebrew state file after successful installation
update_homebrew_state

# Index ~/Applications for Spotlight so newly installed apps are searchable
if [ -d "$HOME/Applications" ]; then
  echo "Indexing ~/Applications for Spotlight..."
  mdimport "$HOME/Applications" 2>/dev/null || true
fi
{{- end }}
{{ end -}}

{{/* Linux setup commands */}}
{{- if eq .chezmoi.os "linux" }}

{{/* Arch Linux setup commands */}}
{{- if eq .chezmoi.osRelease.idLike "arch" }}

# Install base development tools
{{- if (not (eq (output "pacman" "-Q" "base-devel") "base-devel")) }}
sudo pacman -S --needed --noconfirm base-devel
{{- end }}

# Determine AUR helper (paru or yay)
{{- $aur_helper := "" }}
{{- if (lookPath "paru") }}
{{- $aur_helper = "paru" }}
{{- else if (lookPath "yay") }}
{{- $aur_helper = "yay" }}
{{- else }}
{{- $aur_helper = "none" }}
{{- end }}

{{- if eq $aur_helper "none" }}
echo "Error: Neither paru nor yay AUR helper found. Please install one of them first."
echo "To install paru: curl -L 'https://aur.archlinux.org/cgit/aur.git/snapshot/paru.tar.gz' | tar xz && cd paru && makepkg -si --noconfirm && cd .. && rm -rf paru"
echo "To install yay: sudo pacman -S --needed git base-devel && git clone https://aur.archlinux.org/yay.git && cd yay && makepkg -si --noconfirm && cd .. && rm -rf yay"
exit 1
{{- end }}

echo "Using AUR helper: {{ $aur_helper }}"

# Install packages defined in the configuration file
# Extract package names, ignoring install_order and other metadata for Arch
{{- $arch_packages := list }}
{{- range .packages.arch.aur }}
{{- if kindIs "string" . }}
{{- $arch_packages = append $arch_packages . }}
{{- else if kindIs "map" . }}
{{- $arch_packages = append $arch_packages .name }}
{{- end }}
{{- end }}
{{ $aur_helper }} -S --needed --noconfirm {{ range $arch_packages -}} {{ . }} {{ end }}

{{- end }}

{{- end }}
