#!/bin/bash
{{/* Script to check OS and install packages based on OS */}}
# hash: {{ include ".chezmoidata/packages.yml" | sha256sum }}

{{/* Track brew formula versions to detect when packages are upgraded */}}
{{- if eq .chezmoi.os "darwin" }}
# brew_installed_versions: {{ output "brew" "list" "--versions" | sha256sum }}
{{- end }}

{{/* Track versions of packages that should trigger re-runs when updated (alternative Homebrew only) */}}
{{- if and (eq .chezmoi.os "darwin") (eq .homebrewInstallType "alternative") }}
{{- range .packages.darwin.brews }}
{{- if and (kindIs "map" .) (hasKey . "watch_versions") (eq .watch_versions true) }}
# {{ .name }}_version: $(brew list --versions {{ .name }} 2>/dev/null || echo "not_installed")
{{- end }}
{{- end }}
{{- end }}

{{/* 
  Environment variables for package reinstallation:
  - CHEZMOI_REINSTALL_PACKAGES: comma-separated list of packages to reinstall using 'brew reinstall'
    Example: CHEZMOI_REINSTALL_PACKAGES="neovim,tmux" chezmoi apply
    Use when: Quick fix for corrupted installations, preserves installation options
  
  - CHEZMOI_FORCE_REINSTALL_PACKAGES: comma-separated list of packages to uninstall then install
    Example: CHEZMOI_FORCE_REINSTALL_PACKAGES="emacs-plus@31" chezmoi apply  
    Use when: Need clean installation, changing installation options, or package requires full removal
*/}}

{{/* Ensure uv is available for Python scripts */}}
{{ if eq .chezmoi.os "darwin" -}}
# Install uv on macOS
if ! command -v uv >/dev/null 2>&1; then
  echo "Installing uv for Python scripts..."
  if command -v brew >/dev/null 2>&1; then
    brew install uv
  else
    echo "Error: Homebrew not available, cannot install uv"
    exit 1
  fi
fi
{{ else if eq .chezmoi.os "linux" -}}
{{- if or (eq .chezmoi.osRelease.idLike "arch") (eq .chezmoi.osRelease.id "arch") (eq .chezmoi.osRelease.id "cachyos") }}
# Install uv on Linux (Arch-based)
if ! command -v uv >/dev/null 2>&1; then
  echo "Installing uv for Python scripts..."
  if command -v pacman >/dev/null 2>&1; then
    sudo pacman -S --needed --noconfirm uv
  else
    echo "Error: No package manager found, cannot install uv"
    exit 1
  fi
fi
{{- else }}
echo "Error: Unsupported Linux distribution for uv installation"
exit 1
{{- end }}
{{ end }}

# Initialize SQLite database (idempotent)
echo "Initializing SQLite database..."
"{{ .chezmoi.sourceDir }}/dot_local/bin/executable_chezmoi-sqlite" init

{{/* MacOS setup commands - delegated to Python script */}}
{{ if eq .chezmoi.os "darwin" -}}
# Handle package reinstalls (legacy environment variables)
if [ -n "$CHEZMOI_REINSTALL_PACKAGES" ]; then
  echo "Reinstalling packages (brew reinstall): $CHEZMOI_REINSTALL_PACKAGES"
  IFS=',' read -ra PACKAGES <<< "$CHEZMOI_REINSTALL_PACKAGES"
  "{{ .chezmoi.sourceDir }}/dot_local/bin/executable_chezmoi-homebrew-manager" simple-reinstall "${PACKAGES[@]}"
fi

{{- if and (eq .chezmoi.os "darwin") (eq .homebrewInstallType "alternative") }}
{{- $script_path := printf "%s/dot_local/bin/executable_chezmoi-sqlite" .chezmoi.sourceDir }}
{{- $trigger_id := "" }}
{{- $is_new_id := false }}
{{- if env "CHEZMOI_FORCE_REINSTALL_PACKAGES" }}
{{- /* Env present: generate new ID and store in SQLite */}}
{{- $trigger_id = printf "force_reinstall_%s_%s" (env "CHEZMOI_FORCE_REINSTALL_PACKAGES" | sha256sum | substr 0 8) (now | date "20060102150405") }}
{{- $_ := output $script_path "add" $trigger_id (env "CHEZMOI_FORCE_REINSTALL_PACKAGES") }}
{{- $is_new_id = true }}
{{- else }}
{{- /* Env missing: REUSE existing ID from SQLite (mandatory step!) */}}
{{- $trigger_id = output $script_path "get-latest-force-reinstall" | trim }}
{{- /* If no existing ID in SQLite, generate new one and save it */}}
{{- if not $trigger_id }}
{{- $trigger_id = printf "force_reinstall_none_%s" (now | date "20060102150405") }}
{{- $_ := output $script_path "add" $trigger_id "none" }}
{{- $is_new_id = true }}
{{- end }}
{{- end }}

# Force reinstall trigger management - ID: {{ $trigger_id }}
{{- if env "CHEZMOI_FORCE_REINSTALL_PACKAGES" }}
# Environment variable present: running package installation
echo "Using Python package installer for complex installation logic..."
IFS=',' read -ra PACKAGES <<< "$CHEZMOI_FORCE_REINSTALL_PACKAGES"
"{{ .chezmoi.sourceDir }}/dot_local/bin/executable_chezmoi-homebrew-manager" force-reinstall "${PACKAGES[@]}"
{{- end }}
{{- else }}
{{- if env "CHEZMOI_FORCE_REINSTALL_PACKAGES" }}
# Standard Homebrew - use Python script for consistency
echo "Force reinstalling packages: $CHEZMOI_FORCE_REINSTALL_PACKAGES"
IFS=',' read -ra PACKAGES <<< "$CHEZMOI_FORCE_REINSTALL_PACKAGES"
"{{ .chezmoi.sourceDir }}/dot_local/bin/executable_chezmoi-homebrew-manager" force-reinstall "${PACKAGES[@]}"
{{- end }}
{{- end }}

# Extract runtime configuration for Python script
{{- template "brew_eval" . }}

echo "Using Python script for comprehensive Homebrew management..."

{{/* Check for Homebrew path migrations and packages needing rebuild */}}
{{- template "homebrew-migration-check" . }}

{{/* Execute the patch script template */}}
{{- if eq .homebrewInstallType "alternative" }}
{{- template "patch-homebrew-formulas" . }}
{{- end }}

# Prepare runtime configuration
RUNTIME_CONFIG=$(cat << 'EOF'
{
  "os": "{{ .chezmoi.os }}",
  "homebrew_type": "{{ .homebrewInstallType }}",
  {{- if and (hasKey . "homebrewPaths") (hasKey .homebrewPaths "applicationsPath") }}
  "applications_path": {{ .homebrewPaths.applicationsPath | toJson }},
  {{- end }}
  {{- if and (hasKey . "homebrewPath") .homebrewPath }}
  "homebrew_path": {{ .homebrewPath | toJson }},
  {{- end }}
  {{- if and (hasKey . "urls") (hasKey .urls "homebrew") }}
  "homebrew_tarball_url": {{ .urls.homebrew.tarball | toJson }},
  "homebrew_install_url": {{ .urls.homebrew.install | toJson }},
  {{- end }}
  {{- if and (hasKey . "brewBin") .brewBin }}
  "brew_bin": {{ .brewBin | toJson }},
  "has_brew": {{ stat .brewBin | toJson }},
  {{- else }}
  "has_brew": false,
  {{- end }}
  "chezmoi_source_dir": {{ .chezmoi.sourceDir | toJson }}
}
EOF
)

# Call comprehensive Python Homebrew manager for updates and missing packages
# This script only runs on changes (not first run), so we handle:
# 1. Rebuilding outdated source-built packages
# 2. Installing newly added packages
"{{ .chezmoi.sourceDir }}/dot_local/bin/executable_chezmoi-homebrew-manager" full-install --config "$RUNTIME_CONFIG"

{{ end -}}

{{/* Linux setup commands */}}
{{- if eq .chezmoi.os "linux" }}

{{/* Arch Linux setup commands */}}
{{- if eq .chezmoi.osRelease.idLike "arch" }}

# Install base development tools
{{- if (not (eq (output "pacman" "-Q" "base-devel") "base-devel")) }}
sudo pacman -S --needed --noconfirm base-devel
{{- end }}

# Determine AUR helper (paru or yay)
{{- $aur_helper := "" }}
{{- if (lookPath "paru") }}
{{- $aur_helper = "paru" }}
{{- else if (lookPath "yay") }}
{{- $aur_helper = "yay" }}
{{- else }}
{{- $aur_helper = "none" }}
{{- end }}

{{- if eq $aur_helper "none" }}
echo "Error: Neither paru nor yay AUR helper found. Please install one of them first."
echo "To install paru: curl -L 'https://aur.archlinux.org/cgit/aur.git/snapshot/paru.tar.gz' | tar xz && cd paru && makepkg -si --noconfirm && cd .. && rm -rf paru"
echo "To install yay: sudo pacman -S --needed git base-devel && git clone https://aur.archlinux.org/yay.git && cd yay && makepkg -si --noconfirm && cd .. && rm -rf yay"
exit 1
{{- end }}

echo "Using AUR helper: {{ $aur_helper }}"

# Install packages defined in the configuration file
# Extract package names, ignoring install_order and other metadata for Arch
{{- $arch_packages := list }}
{{- range .packages.arch.aur }}
{{- if kindIs "string" . }}
{{- $arch_packages = append $arch_packages . }}
{{- else if kindIs "map" . }}
{{- $arch_packages = append $arch_packages .name }}
{{- end }}
{{- end }}
{{ $aur_helper }} -S --needed --noconfirm {{ range $arch_packages -}} {{ . }} {{ end }}

{{- end }}

{{- end }}
