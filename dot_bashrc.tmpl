#!/bin/bash

# Force en_US.UTF-8 locale
export LC_ALL=en_US.UTF-8

# Activate Mise on interactive
eval "$(mise hook-env -s bash)"

## PATH
# Add each of the specified directories to PATH if they exist
{{- if stat (printf "%s/.local/bin" .chezmoi.homeDir) }}
PATH="$HOME/.local/bin:$PATH" # User-installed binaries
{{- end }}
{{- if stat (printf "%s/.mix/escripts" .chezmoi.homeDir) }}
PATH="$HOME/.mix/escripts:$PATH" # Mix escripts (Elixir)
{{- end }}
{{- if stat (printf "%s/.bun/bin" .chezmoi.homeDir) }}
PATH="$HOME/.bun/bin:$PATH" # Bun JavaScript runtime
{{- end }}
{{- if stat (printf "%s/.deno/bin" .chezmoi.homeDir) }}
PATH="$HOME/.deno/bin:$PATH" # Deno JavaScript runtime
{{- end }}
{{- if stat (printf "%s/.rd/bin" .chezmoi.homeDir) }}
PATH="$HOME/.rd/bin:$PATH" # Rancher Desktop for Docker management
{{- end }}
{{- if stat (printf "%s/.local/share/yabridge" .chezmoi.homeDir) }}
PATH="$HOME/.local/share/yabridge:$PATH" # Yabridge for VST plugins
{{- end }}
{{- $xdgDataHome := env "XDG_DATA_HOME" }}
{{- if not $xdgDataHome }}
{{-   $xdgDataHome = printf "%s/.local/share" .chezmoi.homeDir }}
{{- end }}
{{- if stat (printf "%s/google-cloud-sdk/bin" $xdgDataHome) }}
PATH="${XDG_DATA_HOME:-$HOME/.local/share}/google-cloud-sdk/bin:$PATH" # Google Cloud SDK
{{- end }}
{{- if eq .chezmoi.os "darwin" }}
{{-   $brewPrefix := "" }}
{{-   if stat (print .chezmoi.homeDir "/.homebrew") }}
{{-     $brewPrefix = print .chezmoi.homeDir "/.homebrew" }}
{{-   else if stat "/opt/homebrew" }}
{{-     $brewPrefix = "/opt/homebrew" }}
{{-   else if stat "/usr/local/Homebrew" }}
{{-     $brewPrefix = "/usr/local" }}
{{-   end }}
{{-   if and $brewPrefix (stat (printf "%s/opt/libpq/bin" $brewPrefix)) }}
PATH="{{ $brewPrefix }}/opt/libpq/bin:$PATH" # PostgreSQL
{{-   end }}
{{- end }}
{{- if and (lookPath "brew") (eq .chezmoi.os "darwin") }}
PATH="$(brew --prefix sqlite)/bin:$PATH" # Sqlite from Homebrew instead of MacOS built-in
{{- end }}
export PATH

{{- if lookPath "fzf" }}
# Integrate fzf
source <(fzf --bash)
export FZF_COMPLETION_OPTS='--border --info=inline'
export FZF_DEFAULT_OPTS='--height 60% --tmux=center,80% --layout=reverse --border --info=inline'
# https://github.com/catppuccin/fzf
export FZF_DEFAULT_OPTS=" \
--color=bg+:#414559,bg:#303446,spinner:#f2d5cf,hl:#e78284 \
--color=fg:#c6d0f5,header:#e78284,info:#ca9ee6,pointer:#f2d5cf \
--color=marker:#babbf1,fg+:#c6d0f5,prompt:#ca9ee6,hl+:#e78284 \
--color=selected-bg:#51576d \
--color=border:#414559,label:#c6d0f5"
{{- end }}

{{- if lookPath "carapace" }}
# Load carapace completions
# It includes completions for: aws, gcloud, docker, git, kubectl, terraform, and more
source <(carapace _carapace bash)
{{- end }}

{{- if lookPath "starship" }}
# Load starship prompt
if [[ "$TERM" != "dumb" ]]; then
  source <(starship init bash)
fi
{{- end }}

{{- if lookPath "bat" }}
# Bat as man pager
export MANPAGER="sh -c 'sed -u -e \"s/\\x1B\[[0-9;]*m//g; s/.\\x08//g\" | bat -p -lman'"
{{- end }}

{{- if eq .chezmoi.os "darwin" }}
## MacOS-specific fixes

# Erlang install fixes
{{- $brewPrefix := "" }}
{{- if stat (print .chezmoi.homeDir "/.homebrew") }}
{{-   $brewPrefix = print .chezmoi.homeDir "/.homebrew" }}
{{- else if stat "/opt/homebrew" }}
{{-   $brewPrefix = "/opt/homebrew" }}
{{- else if stat "/usr/local/Homebrew" }}
{{-   $brewPrefix = "/usr/local" }}
{{- end }}
{{- if $brewPrefix }}
UNIXODBCHOME="{{ $brewPrefix }}/opt/unixodbc"
export CPPFLAGS="${CPPFLAGS+"$CPPFLAGS "}-I${UNIXODBCHOME}/include"
export LDFLAGS="${LDFLAGS+"$LDFLAGS "}-L${UNIXODBCHOME}/lib"
export KERL_CONFIGURE_OPTIONS="--with-odbc=${UNIXODBCHOME}"
{{- end }}
{{- end }}

{{- if stat (printf "%s/.config/op/plugins.sh" .chezmoi.homeDir) }}
source $HOME/.config/op/plugins.sh
{{- end }}

# Emacs vterm helper function
vterm_printf() {
    if [ -n "$TMUX" ] \
        && { [ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ]; }; then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}

# Set up aliases
[[ $- == *i* ]] && source $HOME/.config/zsh/aliases.zsh
